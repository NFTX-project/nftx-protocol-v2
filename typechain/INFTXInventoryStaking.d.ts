/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INFTXInventoryStakingInterface extends ethers.utils.Interface {
  functions: {
    "__NFTXInventoryStaking_init(address)": FunctionFragment;
    "deployXTokenForVault(uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "nftxVaultFactory()": FunctionFragment;
    "receiveRewards(uint256,uint256)": FunctionFragment;
    "timelockMintFor(uint256,uint256,address,uint256)": FunctionFragment;
    "vaultXToken(uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "xTokenAddr(address)": FunctionFragment;
    "xTokenShareValue(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXInventoryStaking_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployXTokenForVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftxVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockMintFor",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultXToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xTokenAddr", values: [string]): string;
  encodeFunctionData(
    functionFragment: "xTokenShareValue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__NFTXInventoryStaking_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployXTokenForVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftxVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockMintFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultXToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xTokenAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xTokenShareValue",
    data: BytesLike
  ): Result;

  events: {};
}

export class INFTXInventoryStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INFTXInventoryStakingInterface;

  functions: {
    __NFTXInventoryStaking_init(
      nftxFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployXTokenForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelockMintFor(
      vaultId: BigNumberish,
      amount: BigNumberish,
      to: string,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultXToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      vaultId: BigNumberish,
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xTokenAddr(baseToken: string, overrides?: CallOverrides): Promise<[string]>;

    xTokenShareValue(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  __NFTXInventoryStaking_init(
    nftxFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployXTokenForVault(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

  receiveRewards(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelockMintFor(
    vaultId: BigNumberish,
    amount: BigNumberish,
    to: string,
    timelockLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultXToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    vaultId: BigNumberish,
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xTokenAddr(baseToken: string, overrides?: CallOverrides): Promise<string>;

  xTokenShareValue(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    __NFTXInventoryStaking_init(
      nftxFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployXTokenForVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timelockMintFor(
      vaultId: BigNumberish,
      amount: BigNumberish,
      to: string,
      timelockLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultXToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      vaultId: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    xTokenAddr(baseToken: string, overrides?: CallOverrides): Promise<string>;

    xTokenShareValue(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    __NFTXInventoryStaking_init(
      nftxFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployXTokenForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelockMintFor(
      vaultId: BigNumberish,
      amount: BigNumberish,
      to: string,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultXToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      vaultId: BigNumberish,
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xTokenAddr(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xTokenShareValue(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXInventoryStaking_init(
      nftxFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployXTokenForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelockMintFor(
      vaultId: BigNumberish,
      amount: BigNumberish,
      to: string,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultXToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      vaultId: BigNumberish,
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xTokenAddr(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xTokenShareValue(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
