/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INFTXLPStakingInterface extends ethers.utils.Interface {
  functions: {
    "__NFTXLPStaking__init(address)": FunctionFragment;
    "addPoolForVault(uint256)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "exit(uint256,uint256)": FunctionFragment;
    "newRewardDistributionToken(uint256)": FunctionFragment;
    "nftxVaultFactory()": FunctionFragment;
    "oldRewardDistributionToken(uint256)": FunctionFragment;
    "receiveRewards(uint256,uint256)": FunctionFragment;
    "rescue(uint256)": FunctionFragment;
    "rewardDistTokenImpl()": FunctionFragment;
    "rewardDistributionToken(uint256)": FunctionFragment;
    "rewardDistributionTokenAddr(address,address)": FunctionFragment;
    "setNFTXVaultFactory(address)": FunctionFragment;
    "setStakingTokenProvider(address)": FunctionFragment;
    "stakingToken(address)": FunctionFragment;
    "stakingTokenProvider()": FunctionFragment;
    "timelockDepositFor(uint256,address,uint256,uint256)": FunctionFragment;
    "unusedRewardDistributionToken(uint256)": FunctionFragment;
    "updatePoolForVault(uint256)": FunctionFragment;
    "updatePoolForVaults(uint256[])": FunctionFragment;
    "vaultToken(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXLPStaking__init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolForVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newRewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftxVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldRewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistTokenImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributionTokenAddr",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTXVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingTokenProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockDepositFor",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unusedRewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolForVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolForVaults",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "vaultToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__NFTXLPStaking__init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolForVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newRewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftxVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldRewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistTokenImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributionTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTXVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingTokenProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockDepositFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unusedRewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolForVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolForVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class INFTXLPStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INFTXLPStakingInterface;

  functions: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescue(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDistTokenImpl(overrides?: CallOverrides): Promise<[string]>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingTokenProvider(overrides?: CallOverrides): Promise<[string]>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolForVaults(
      vaultId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __NFTXLPStaking__init(
    _stakingTokenProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPoolForVault(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newRewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

  oldRewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  receiveRewards(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescue(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDistTokenImpl(overrides?: CallOverrides): Promise<string>;

  rewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardDistributionTokenAddr(
    stakedToken: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setNFTXVaultFactory(
    newFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingTokenProvider(
    newProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(_vaultToken: string, overrides?: CallOverrides): Promise<string>;

  stakingTokenProvider(overrides?: CallOverrides): Promise<string>;

  timelockDepositFor(
    vaultId: BigNumberish,
    account: string,
    amount: BigNumberish,
    timelockLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unusedRewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updatePoolForVault(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolForVaults(
    vaultId: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultToken(_stakingToken: string, overrides?: CallOverrides): Promise<string>;

  withdraw(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rescue(vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    rewardDistTokenImpl(overrides?: CallOverrides): Promise<string>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingTokenProvider(overrides?: CallOverrides): Promise<string>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolForVaults(
      vaultId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaultToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescue(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDistTokenImpl(overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingTokenProvider(overrides?: CallOverrides): Promise<BigNumber>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolForVaults(
      vaultId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescue(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDistTokenImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingTokenProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolForVaults(
      vaultId: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
