/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INFTXSimpleFeeDistributorInterface extends ethers.utils.Interface {
  functions: {
    "__SimpleFeeDistributor__init__(address,address)": FunctionFragment;
    "addReceiver(uint256,address,bool)": FunctionFragment;
    "allocTotal()": FunctionFragment;
    "changeReceiverAddress(uint256,address,bool)": FunctionFragment;
    "changeReceiverAlloc(uint256,uint256)": FunctionFragment;
    "distribute(uint256)": FunctionFragment;
    "initializeVaultReceivers(uint256)": FunctionFragment;
    "inventoryStaking()": FunctionFragment;
    "lpStaking()": FunctionFragment;
    "nftxVaultFactory()": FunctionFragment;
    "removeReceiver(uint256)": FunctionFragment;
    "rescueTokens(address)": FunctionFragment;
    "setInventoryStakingAddress(address)": FunctionFragment;
    "setLPStakingAddress(address)": FunctionFragment;
    "setNFTXVaultFactory(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__SimpleFeeDistributor__init__",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReceiver",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allocTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeReceiverAddress",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReceiverAlloc",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeVaultReceivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inventoryStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpStaking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftxVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReceiver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInventoryStakingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPStakingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTXVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "__SimpleFeeDistributor__init__",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocTotal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeReceiverAlloc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeVaultReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inventoryStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftxVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInventoryStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTXVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {};
}

export class INFTXSimpleFeeDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INFTXSimpleFeeDistributorInterface;

  functions: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeReceiverAddress(
      _idx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeReceiverAlloc(
      _idx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distribute(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inventoryStaking(overrides?: CallOverrides): Promise<[string]>;

    lpStaking(overrides?: CallOverrides): Promise<[string]>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  __SimpleFeeDistributor__init__(
    _lpStaking: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReceiver(
    _allocPoint: BigNumberish,
    _receiver: string,
    _isContract: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocTotal(overrides?: CallOverrides): Promise<BigNumber>;

  changeReceiverAddress(
    _idx: BigNumberish,
    _address: string,
    _isContract: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeReceiverAlloc(
    _idx: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distribute(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeVaultReceivers(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inventoryStaking(overrides?: CallOverrides): Promise<string>;

  lpStaking(overrides?: CallOverrides): Promise<string>;

  nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

  removeReceiver(
    _receiverIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTokens(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInventoryStakingAddress(
    _inventoryStaking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLPStakingAddress(
    _lpStaking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTXVaultFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allocTotal(overrides?: CallOverrides): Promise<BigNumber>;

    changeReceiverAddress(
      _idx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeReceiverAlloc(
      _idx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distribute(vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    inventoryStaking(overrides?: CallOverrides): Promise<string>;

    lpStaking(overrides?: CallOverrides): Promise<string>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueTokens(token: string, overrides?: CallOverrides): Promise<void>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocTotal(overrides?: CallOverrides): Promise<BigNumber>;

    changeReceiverAddress(
      _idx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeReceiverAlloc(
      _idx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distribute(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inventoryStaking(overrides?: CallOverrides): Promise<BigNumber>;

    lpStaking(overrides?: CallOverrides): Promise<BigNumber>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeReceiverAddress(
      _idx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeReceiverAlloc(
      _idx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distribute(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inventoryStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
