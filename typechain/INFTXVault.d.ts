/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INFTXVaultInterface extends ethers.utils.Interface {
  functions: {
    "__NFTXVault_init(string,string,address,bool,bool)": FunctionFragment;
    "allHoldings()": FunctionFragment;
    "allValidNFTs(uint256[])": FunctionFragment;
    "allowAllItems()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetAddress()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "deployEligibilityStorage(uint256,bytes)": FunctionFragment;
    "disableVaultFees()": FunctionFragment;
    "eligibilityStorage()": FunctionFragment;
    "enableMint()": FunctionFragment;
    "enableRandomRedeem()": FunctionFragment;
    "enableRandomSwap()": FunctionFragment;
    "enableTargetRedeem()": FunctionFragment;
    "enableTargetSwap()": FunctionFragment;
    "finalizeVault()": FunctionFragment;
    "is1155()": FunctionFragment;
    "manager()": FunctionFragment;
    "mint(uint256[],uint256[])": FunctionFragment;
    "mintFee()": FunctionFragment;
    "mintTo(uint256[],uint256[],address)": FunctionFragment;
    "nftIdAt(uint256)": FunctionFragment;
    "randomRedeemFee()": FunctionFragment;
    "randomSwapFee()": FunctionFragment;
    "redeem(uint256,uint256[])": FunctionFragment;
    "redeemTo(uint256,uint256[],address)": FunctionFragment;
    "setFees(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setVaultFeatures(bool,bool,bool,bool,bool)": FunctionFragment;
    "setVaultMetadata(string,string)": FunctionFragment;
    "swap(uint256[],uint256[],uint256[])": FunctionFragment;
    "swapTo(uint256[],uint256[],uint256[],address)": FunctionFragment;
    "targetRedeemFee()": FunctionFragment;
    "targetSwapFee()": FunctionFragment;
    "totalHoldings()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vaultFactory()": FunctionFragment;
    "vaultFees()": FunctionFragment;
    "vaultId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXVault_init",
    values: [string, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allHoldings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allValidNFTs",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowAllItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deployEligibilityStorage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableVaultFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eligibilityStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableRandomRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableRandomSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTargetRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTargetSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "is1155", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "mintFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftIdAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomRedeemFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTo",
    values: [BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVaultFeatures",
    values: [boolean, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTo",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "targetRedeemFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalHoldings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaultFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultId", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "__NFTXVault_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allHoldings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allValidNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowAllItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployEligibilityStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableVaultFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibilityStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enableMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableRandomRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableRandomSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTargetRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTargetSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is1155", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftIdAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomRedeemFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFeatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetRedeemFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHoldings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "EligibilityDeployed(uint256,address)": EventFragment;
    "EnableMintUpdated(bool)": EventFragment;
    "EnableRandomRedeemUpdated(bool)": EventFragment;
    "EnableRandomSwapUpdated(bool)": EventFragment;
    "EnableTargetRedeemUpdated(bool)": EventFragment;
    "EnableTargetSwapUpdated(bool)": EventFragment;
    "ManagerSet(address)": EventFragment;
    "Minted(uint256[],uint256[],address)": EventFragment;
    "Redeemed(uint256[],uint256[],address)": EventFragment;
    "Swapped(uint256[],uint256[],uint256[],uint256[],address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultInit(uint256,address,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EligibilityDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableMintUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableRandomRedeemUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableRandomSwapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableTargetRedeemUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableTargetSwapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultInit"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type EligibilityDeployedEvent = TypedEvent<
  [BigNumber, string] & { moduleIndex: BigNumber; eligibilityAddr: string }
>;

export type EnableMintUpdatedEvent = TypedEvent<
  [boolean] & { enabled: boolean }
>;

export type EnableRandomRedeemUpdatedEvent = TypedEvent<
  [boolean] & { enabled: boolean }
>;

export type EnableRandomSwapUpdatedEvent = TypedEvent<
  [boolean] & { enabled: boolean }
>;

export type EnableTargetRedeemUpdatedEvent = TypedEvent<
  [boolean] & { enabled: boolean }
>;

export type EnableTargetSwapUpdatedEvent = TypedEvent<
  [boolean] & { enabled: boolean }
>;

export type ManagerSetEvent = TypedEvent<[string] & { manager: string }>;

export type MintedEvent = TypedEvent<
  [BigNumber[], BigNumber[], string] & {
    nftIds: BigNumber[];
    amounts: BigNumber[];
    to: string;
  }
>;

export type RedeemedEvent = TypedEvent<
  [BigNumber[], BigNumber[], string] & {
    nftIds: BigNumber[];
    specificIds: BigNumber[];
    to: string;
  }
>;

export type SwappedEvent = TypedEvent<
  [BigNumber[], BigNumber[], BigNumber[], BigNumber[], string] & {
    nftIds: BigNumber[];
    amounts: BigNumber[];
    specificIds: BigNumber[];
    redeemedIds: BigNumber[];
    to: string;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type VaultInitEvent = TypedEvent<
  [BigNumber, string, boolean, boolean] & {
    vaultId: BigNumber;
    assetAddress: string;
    is1155: boolean;
    allowAllItems: boolean;
  }
>;

export class INFTXVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INFTXVaultInterface;

  functions: {
    __NFTXVault_init(
      _name: string,
      _symbol: string,
      _assetAddress: string,
      _is1155: boolean,
      _allowAllItems: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allHoldings(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    allValidNFTs(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowAllItems(overrides?: CallOverrides): Promise<[boolean]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetAddress(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    deployEligibilityStorage(
      moduleIndex: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableVaultFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eligibilityStorage(overrides?: CallOverrides): Promise<[string]>;

    enableMint(overrides?: CallOverrides): Promise<[boolean]>;

    enableRandomRedeem(overrides?: CallOverrides): Promise<[boolean]>;

    enableRandomSwap(overrides?: CallOverrides): Promise<[boolean]>;

    enableTargetRedeem(overrides?: CallOverrides): Promise<[boolean]>;

    enableTargetSwap(overrides?: CallOverrides): Promise<[boolean]>;

    finalizeVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    is1155(overrides?: CallOverrides): Promise<[boolean]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    mint(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftIdAt(
      holdingsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    randomRedeemFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    randomSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemTo(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _mintFee: BigNumberish,
      _randomRedeemFee: BigNumberish,
      _targetRedeemFee: BigNumberish,
      _randomSwapFee: BigNumberish,
      _targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultFeatures(
      _enableMint: boolean,
      _enableRandomRedeem: boolean,
      _enableTargetRedeem: boolean,
      _enableRandomSwap: boolean,
      _enableTargetSwap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultMetadata(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetRedeemFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalHoldings(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultFactory(overrides?: CallOverrides): Promise<[string]>;

    vaultFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    vaultId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  __NFTXVault_init(
    _name: string,
    _symbol: string,
    _assetAddress: string,
    _is1155: boolean,
    _allowAllItems: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allHoldings(overrides?: CallOverrides): Promise<BigNumber[]>;

  allValidNFTs(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowAllItems(overrides?: CallOverrides): Promise<boolean>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetAddress(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  deployEligibilityStorage(
    moduleIndex: BigNumberish,
    initData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableVaultFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eligibilityStorage(overrides?: CallOverrides): Promise<string>;

  enableMint(overrides?: CallOverrides): Promise<boolean>;

  enableRandomRedeem(overrides?: CallOverrides): Promise<boolean>;

  enableRandomSwap(overrides?: CallOverrides): Promise<boolean>;

  enableTargetRedeem(overrides?: CallOverrides): Promise<boolean>;

  enableTargetSwap(overrides?: CallOverrides): Promise<boolean>;

  finalizeVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  is1155(overrides?: CallOverrides): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  mint(
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintFee(overrides?: CallOverrides): Promise<BigNumber>;

  mintTo(
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftIdAt(
    holdingsIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  randomRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

  randomSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    amount: BigNumberish,
    specificIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemTo(
    amount: BigNumberish,
    specificIds: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _mintFee: BigNumberish,
    _randomRedeemFee: BigNumberish,
    _targetRedeemFee: BigNumberish,
    _randomSwapFee: BigNumberish,
    _targetSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultFeatures(
    _enableMint: boolean,
    _enableRandomRedeem: boolean,
    _enableTargetRedeem: boolean,
    _enableRandomSwap: boolean,
    _enableTargetSwap: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultMetadata(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    specificIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTo(
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    specificIds: BigNumberish[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

  targetSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalHoldings(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultFactory(overrides?: CallOverrides): Promise<string>;

  vaultFees(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  vaultId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    __NFTXVault_init(
      _name: string,
      _symbol: string,
      _assetAddress: string,
      _is1155: boolean,
      _allowAllItems: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allHoldings(overrides?: CallOverrides): Promise<BigNumber[]>;

    allValidNFTs(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowAllItems(overrides?: CallOverrides): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetAddress(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployEligibilityStorage(
      moduleIndex: BigNumberish,
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    disableVaultFees(overrides?: CallOverrides): Promise<void>;

    eligibilityStorage(overrides?: CallOverrides): Promise<string>;

    enableMint(overrides?: CallOverrides): Promise<boolean>;

    enableRandomRedeem(overrides?: CallOverrides): Promise<boolean>;

    enableRandomSwap(overrides?: CallOverrides): Promise<boolean>;

    enableTargetRedeem(overrides?: CallOverrides): Promise<boolean>;

    enableTargetSwap(overrides?: CallOverrides): Promise<boolean>;

    finalizeVault(overrides?: CallOverrides): Promise<void>;

    is1155(overrides?: CallOverrides): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    mint(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFee(overrides?: CallOverrides): Promise<BigNumber>;

    mintTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftIdAt(
      holdingsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    randomSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    redeemTo(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setFees(
      _mintFee: BigNumberish,
      _randomRedeemFee: BigNumberish,
      _targetRedeemFee: BigNumberish,
      _randomSwapFee: BigNumberish,
      _targetSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>;

    setVaultFeatures(
      _enableMint: boolean,
      _enableRandomRedeem: boolean,
      _enableTargetRedeem: boolean,
      _enableRandomSwap: boolean,
      _enableTargetSwap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultMetadata(
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    targetRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    targetSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalHoldings(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaultFactory(overrides?: CallOverrides): Promise<string>;

    vaultFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "EligibilityDeployed(uint256,address)"(
      moduleIndex?: null,
      eligibilityAddr?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { moduleIndex: BigNumber; eligibilityAddr: string }
    >;

    EligibilityDeployed(
      moduleIndex?: null,
      eligibilityAddr?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { moduleIndex: BigNumber; eligibilityAddr: string }
    >;

    "EnableMintUpdated(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    EnableMintUpdated(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "EnableRandomRedeemUpdated(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    EnableRandomRedeemUpdated(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "EnableRandomSwapUpdated(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    EnableRandomSwapUpdated(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "EnableTargetRedeemUpdated(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    EnableTargetRedeemUpdated(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "EnableTargetSwapUpdated(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    EnableTargetSwapUpdated(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "ManagerSet(address)"(
      manager?: null
    ): TypedEventFilter<[string], { manager: string }>;

    ManagerSet(manager?: null): TypedEventFilter<[string], { manager: string }>;

    "Minted(uint256[],uint256[],address)"(
      nftIds?: null,
      amounts?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], string],
      { nftIds: BigNumber[]; amounts: BigNumber[]; to: string }
    >;

    Minted(
      nftIds?: null,
      amounts?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], string],
      { nftIds: BigNumber[]; amounts: BigNumber[]; to: string }
    >;

    "Redeemed(uint256[],uint256[],address)"(
      nftIds?: null,
      specificIds?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], string],
      { nftIds: BigNumber[]; specificIds: BigNumber[]; to: string }
    >;

    Redeemed(
      nftIds?: null,
      specificIds?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], string],
      { nftIds: BigNumber[]; specificIds: BigNumber[]; to: string }
    >;

    "Swapped(uint256[],uint256[],uint256[],uint256[],address)"(
      nftIds?: null,
      amounts?: null,
      specificIds?: null,
      redeemedIds?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[], string],
      {
        nftIds: BigNumber[];
        amounts: BigNumber[];
        specificIds: BigNumber[];
        redeemedIds: BigNumber[];
        to: string;
      }
    >;

    Swapped(
      nftIds?: null,
      amounts?: null,
      specificIds?: null,
      redeemedIds?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[], string],
      {
        nftIds: BigNumber[];
        amounts: BigNumber[];
        specificIds: BigNumber[];
        redeemedIds: BigNumber[];
        to: string;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "VaultInit(uint256,address,bool,bool)"(
      vaultId?: BigNumberish | null,
      assetAddress?: null,
      is1155?: null,
      allowAllItems?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean, boolean],
      {
        vaultId: BigNumber;
        assetAddress: string;
        is1155: boolean;
        allowAllItems: boolean;
      }
    >;

    VaultInit(
      vaultId?: BigNumberish | null,
      assetAddress?: null,
      is1155?: null,
      allowAllItems?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean, boolean],
      {
        vaultId: BigNumber;
        assetAddress: string;
        is1155: boolean;
        allowAllItems: boolean;
      }
    >;
  };

  estimateGas: {
    __NFTXVault_init(
      _name: string,
      _symbol: string,
      _assetAddress: string,
      _is1155: boolean,
      _allowAllItems: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allHoldings(overrides?: CallOverrides): Promise<BigNumber>;

    allValidNFTs(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowAllItems(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployEligibilityStorage(
      moduleIndex: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableVaultFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eligibilityStorage(overrides?: CallOverrides): Promise<BigNumber>;

    enableMint(overrides?: CallOverrides): Promise<BigNumber>;

    enableRandomRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    enableRandomSwap(overrides?: CallOverrides): Promise<BigNumber>;

    enableTargetRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    enableTargetSwap(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    is1155(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintFee(overrides?: CallOverrides): Promise<BigNumber>;

    mintTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftIdAt(
      holdingsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    randomSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemTo(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _mintFee: BigNumberish,
      _randomRedeemFee: BigNumberish,
      _targetRedeemFee: BigNumberish,
      _randomSwapFee: BigNumberish,
      _targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultFeatures(
      _enableMint: boolean,
      _enableRandomRedeem: boolean,
      _enableTargetRedeem: boolean,
      _enableRandomSwap: boolean,
      _enableTargetSwap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultMetadata(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    targetSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalHoldings(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    vaultFees(overrides?: CallOverrides): Promise<BigNumber>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXVault_init(
      _name: string,
      _symbol: string,
      _assetAddress: string,
      _is1155: boolean,
      _allowAllItems: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allHoldings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allValidNFTs(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowAllItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployEligibilityStorage(
      moduleIndex: BigNumberish,
      initData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableVaultFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eligibilityStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableRandomRedeem(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableRandomSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableTargetRedeem(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableTargetSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    is1155(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftIdAt(
      holdingsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomRedeemFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemTo(
      amount: BigNumberish,
      specificIds: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _mintFee: BigNumberish,
      _randomRedeemFee: BigNumberish,
      _targetRedeemFee: BigNumberish,
      _randomSwapFee: BigNumberish,
      _targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultFeatures(
      _enableMint: boolean,
      _enableRandomRedeem: boolean,
      _enableTargetRedeem: boolean,
      _enableRandomSwap: boolean,
      _enableTargetSwap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultMetadata(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTo(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetRedeemFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalHoldings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
