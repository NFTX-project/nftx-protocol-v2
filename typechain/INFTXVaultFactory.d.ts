/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INFTXVaultFactoryInterface extends ethers.utils.Interface {
  functions: {
    "__NFTXVaultFactory_init(address,address)": FunctionFragment;
    "allVaults()": FunctionFragment;
    "childImplementation()": FunctionFragment;
    "createVault(string,string,address,bool,bool)": FunctionFragment;
    "disableVaultFees(uint256)": FunctionFragment;
    "eligibilityManager()": FunctionFragment;
    "excludedFromFees(address)": FunctionFragment;
    "factoryMintFee()": FunctionFragment;
    "factoryRandomRedeemFee()": FunctionFragment;
    "factoryRandomSwapFee()": FunctionFragment;
    "factoryTargetRedeemFee()": FunctionFragment;
    "factoryTargetSwapFee()": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "isLocked(uint256)": FunctionFragment;
    "numVaults()": FunctionFragment;
    "setEligibilityManager(address)": FunctionFragment;
    "setFactoryFees(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setFeeDistributor(address)": FunctionFragment;
    "setFeeExclusion(address,bool)": FunctionFragment;
    "setVaultFees(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setZapContract(address)": FunctionFragment;
    "upgradeChildTo(address)": FunctionFragment;
    "vault(uint256)": FunctionFragment;
    "vaultFees(uint256)": FunctionFragment;
    "vaultsForAsset(address)": FunctionFragment;
    "zapContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXVaultFactory_init",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "allVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "childImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "disableVaultFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eligibilityManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryMintFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryRandomRedeemFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryRandomSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryTargetRedeemFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryTargetSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "numVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setEligibilityManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExclusion",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setZapContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeChildTo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "vaultFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultsForAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zapContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__NFTXVaultFactory_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "childImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableVaultFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligibilityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryRandomRedeemFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryRandomSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryTargetRedeemFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryTargetSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEligibilityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeChildTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultsForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zapContract",
    data: BytesLike
  ): Result;

  events: {
    "DisableVaultFees(uint256)": EventFragment;
    "FeeExclusion(address,bool)": EventFragment;
    "NewEligibilityManager(address,address)": EventFragment;
    "NewFeeDistributor(address,address)": EventFragment;
    "NewVault(uint256,address,address)": EventFragment;
    "NewZapContract(address,address)": EventFragment;
    "UpdateFactoryFees(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateVaultFees(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisableVaultFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeExclusion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEligibilityManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFeeDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewZapContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFactoryFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateVaultFees"): EventFragment;
}

export type DisableVaultFeesEvent = TypedEvent<
  [BigNumber] & { vaultId: BigNumber }
>;

export type FeeExclusionEvent = TypedEvent<
  [string, boolean] & { feeExcluded: string; excluded: boolean }
>;

export type NewEligibilityManagerEvent = TypedEvent<
  [string, string] & { oldEligManager: string; newEligManager: string }
>;

export type NewFeeDistributorEvent = TypedEvent<
  [string, string] & { oldDistributor: string; newDistributor: string }
>;

export type NewVaultEvent = TypedEvent<
  [BigNumber, string, string] & {
    vaultId: BigNumber;
    vaultAddress: string;
    assetAddress: string;
  }
>;

export type NewZapContractEvent = TypedEvent<
  [string, string] & { oldZap: string; newZap: string }
>;

export type UpdateFactoryFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    mintFee: BigNumber;
    randomRedeemFee: BigNumber;
    targetRedeemFee: BigNumber;
    randomSwapFee: BigNumber;
    targetSwapFee: BigNumber;
  }
>;

export type UpdateVaultFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    vaultId: BigNumber;
    mintFee: BigNumber;
    randomRedeemFee: BigNumber;
    targetRedeemFee: BigNumber;
    randomSwapFee: BigNumber;
    targetSwapFee: BigNumber;
  }
>;

export class INFTXVaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INFTXVaultFactoryInterface;

  functions: {
    __NFTXVaultFactory_init(
      _vaultImpl: string,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allVaults(overrides?: CallOverrides): Promise<[string[]]>;

    childImplementation(overrides?: CallOverrides): Promise<[string]>;

    createVault(
      name: string,
      symbol: string,
      _assetAddress: string,
      is1155: boolean,
      allowAllItems: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableVaultFees(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eligibilityManager(overrides?: CallOverrides): Promise<[string]>;

    excludedFromFees(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    factoryMintFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    factoryRandomRedeemFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    factoryRandomSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    factoryTargetRedeemFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    factoryTargetSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    isLocked(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    numVaults(overrides?: CallOverrides): Promise<[BigNumber]>;

    setEligibilityManager(
      _eligibilityManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactoryFees(
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeExclusion(
      _excludedAddr: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultFees(
      vaultId: BigNumberish,
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setZapContract(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeChildTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(vaultId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    vaultFees(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    vaultsForAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    zapContract(overrides?: CallOverrides): Promise<[string]>;
  };

  __NFTXVaultFactory_init(
    _vaultImpl: string,
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allVaults(overrides?: CallOverrides): Promise<string[]>;

  childImplementation(overrides?: CallOverrides): Promise<string>;

  createVault(
    name: string,
    symbol: string,
    _assetAddress: string,
    is1155: boolean,
    allowAllItems: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableVaultFees(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eligibilityManager(overrides?: CallOverrides): Promise<string>;

  excludedFromFees(addr: string, overrides?: CallOverrides): Promise<boolean>;

  factoryMintFee(overrides?: CallOverrides): Promise<BigNumber>;

  factoryRandomRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

  factoryRandomSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  factoryTargetRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

  factoryTargetSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  isLocked(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  numVaults(overrides?: CallOverrides): Promise<BigNumber>;

  setEligibilityManager(
    _eligibilityManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactoryFees(
    mintFee: BigNumberish,
    randomRedeemFee: BigNumberish,
    targetRedeemFee: BigNumberish,
    randomSwapFee: BigNumberish,
    targetSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeDistributor(
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeExclusion(
    _excludedAddr: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultFees(
    vaultId: BigNumberish,
    mintFee: BigNumberish,
    randomRedeemFee: BigNumberish,
    targetRedeemFee: BigNumberish,
    randomSwapFee: BigNumberish,
    targetSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setZapContract(
    _zapContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeChildTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vaultFees(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  vaultsForAsset(asset: string, overrides?: CallOverrides): Promise<string[]>;

  zapContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __NFTXVaultFactory_init(
      _vaultImpl: string,
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allVaults(overrides?: CallOverrides): Promise<string[]>;

    childImplementation(overrides?: CallOverrides): Promise<string>;

    createVault(
      name: string,
      symbol: string,
      _assetAddress: string,
      is1155: boolean,
      allowAllItems: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableVaultFees(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    eligibilityManager(overrides?: CallOverrides): Promise<string>;

    excludedFromFees(addr: string, overrides?: CallOverrides): Promise<boolean>;

    factoryMintFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryRandomRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryRandomSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryTargetRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryTargetSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    isLocked(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;

    setEligibilityManager(
      _eligibilityManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactoryFees(
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeExclusion(
      _excludedAddr: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultFees(
      vaultId: BigNumberish,
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setZapContract(
      _zapContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeChildTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vaultFees(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    vaultsForAsset(asset: string, overrides?: CallOverrides): Promise<string[]>;

    zapContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DisableVaultFees(uint256)"(
      vaultId?: null
    ): TypedEventFilter<[BigNumber], { vaultId: BigNumber }>;

    DisableVaultFees(
      vaultId?: null
    ): TypedEventFilter<[BigNumber], { vaultId: BigNumber }>;

    "FeeExclusion(address,bool)"(
      feeExcluded?: null,
      excluded?: null
    ): TypedEventFilter<
      [string, boolean],
      { feeExcluded: string; excluded: boolean }
    >;

    FeeExclusion(
      feeExcluded?: null,
      excluded?: null
    ): TypedEventFilter<
      [string, boolean],
      { feeExcluded: string; excluded: boolean }
    >;

    "NewEligibilityManager(address,address)"(
      oldEligManager?: null,
      newEligManager?: null
    ): TypedEventFilter<
      [string, string],
      { oldEligManager: string; newEligManager: string }
    >;

    NewEligibilityManager(
      oldEligManager?: null,
      newEligManager?: null
    ): TypedEventFilter<
      [string, string],
      { oldEligManager: string; newEligManager: string }
    >;

    "NewFeeDistributor(address,address)"(
      oldDistributor?: null,
      newDistributor?: null
    ): TypedEventFilter<
      [string, string],
      { oldDistributor: string; newDistributor: string }
    >;

    NewFeeDistributor(
      oldDistributor?: null,
      newDistributor?: null
    ): TypedEventFilter<
      [string, string],
      { oldDistributor: string; newDistributor: string }
    >;

    "NewVault(uint256,address,address)"(
      vaultId?: BigNumberish | null,
      vaultAddress?: null,
      assetAddress?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { vaultId: BigNumber; vaultAddress: string; assetAddress: string }
    >;

    NewVault(
      vaultId?: BigNumberish | null,
      vaultAddress?: null,
      assetAddress?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { vaultId: BigNumber; vaultAddress: string; assetAddress: string }
    >;

    "NewZapContract(address,address)"(
      oldZap?: null,
      newZap?: null
    ): TypedEventFilter<[string, string], { oldZap: string; newZap: string }>;

    NewZapContract(
      oldZap?: null,
      newZap?: null
    ): TypedEventFilter<[string, string], { oldZap: string; newZap: string }>;

    "UpdateFactoryFees(uint256,uint256,uint256,uint256,uint256)"(
      mintFee?: null,
      randomRedeemFee?: null,
      targetRedeemFee?: null,
      randomSwapFee?: null,
      targetSwapFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        mintFee: BigNumber;
        randomRedeemFee: BigNumber;
        targetRedeemFee: BigNumber;
        randomSwapFee: BigNumber;
        targetSwapFee: BigNumber;
      }
    >;

    UpdateFactoryFees(
      mintFee?: null,
      randomRedeemFee?: null,
      targetRedeemFee?: null,
      randomSwapFee?: null,
      targetSwapFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        mintFee: BigNumber;
        randomRedeemFee: BigNumber;
        targetRedeemFee: BigNumber;
        randomSwapFee: BigNumber;
        targetSwapFee: BigNumber;
      }
    >;

    "UpdateVaultFees(uint256,uint256,uint256,uint256,uint256,uint256)"(
      vaultId?: null,
      mintFee?: null,
      randomRedeemFee?: null,
      targetRedeemFee?: null,
      randomSwapFee?: null,
      targetSwapFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        vaultId: BigNumber;
        mintFee: BigNumber;
        randomRedeemFee: BigNumber;
        targetRedeemFee: BigNumber;
        randomSwapFee: BigNumber;
        targetSwapFee: BigNumber;
      }
    >;

    UpdateVaultFees(
      vaultId?: null,
      mintFee?: null,
      randomRedeemFee?: null,
      targetRedeemFee?: null,
      randomSwapFee?: null,
      targetSwapFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        vaultId: BigNumber;
        mintFee: BigNumber;
        randomRedeemFee: BigNumber;
        targetRedeemFee: BigNumber;
        randomSwapFee: BigNumber;
        targetSwapFee: BigNumber;
      }
    >;
  };

  estimateGas: {
    __NFTXVaultFactory_init(
      _vaultImpl: string,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allVaults(overrides?: CallOverrides): Promise<BigNumber>;

    childImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(
      name: string,
      symbol: string,
      _assetAddress: string,
      is1155: boolean,
      allowAllItems: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableVaultFees(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eligibilityManager(overrides?: CallOverrides): Promise<BigNumber>;

    excludedFromFees(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryMintFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryRandomRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryRandomSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryTargetRedeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryTargetSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    isLocked(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;

    setEligibilityManager(
      _eligibilityManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactoryFees(
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeExclusion(
      _excludedAddr: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultFees(
      vaultId: BigNumberish,
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setZapContract(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeChildTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(vaultId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vaultFees(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultsForAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXVaultFactory_init(
      _vaultImpl: string,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVault(
      name: string,
      symbol: string,
      _assetAddress: string,
      is1155: boolean,
      allowAllItems: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableVaultFees(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eligibilityManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludedFromFees(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryMintFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryRandomRedeemFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryRandomSwapFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryTargetRedeemFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryTargetSwapFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLocked(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEligibilityManager(
      _eligibilityManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactoryFees(
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeExclusion(
      _excludedAddr: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultFees(
      vaultId: BigNumberish,
      mintFee: BigNumberish,
      randomRedeemFee: BigNumberish,
      targetRedeemFee: BigNumberish,
      randomSwapFee: BigNumberish,
      targetSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setZapContract(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeChildTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultFees(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultsForAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zapContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
