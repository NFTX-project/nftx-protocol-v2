/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MultiProxyControllerInterface extends ethers.utils.Interface {
  functions: {
    "addProxy(string,address)": FunctionFragment;
    "changeAllAdmins(address)": FunctionFragment;
    "changeProxyAdmin(uint256,address)": FunctionFragment;
    "getAdmin(uint256)": FunctionFragment;
    "getAllImpls()": FunctionFragment;
    "getAllProxies()": FunctionFragment;
    "getAllProxiesInfo()": FunctionFragment;
    "getImpl(uint256)": FunctionFragment;
    "getName(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeProxy(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeProxyTo(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addProxy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAllAdmins",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProxyAdmin",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllImpls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProxies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProxiesInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImpl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeProxy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProxyTo",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllImpls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProxiesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProxyTo",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProxyAdded(string,address)": EventFragment;
    "ProxyAdminChanged(uint256,address)": EventFragment;
    "ProxyRemoved(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyRemoved"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProxyAddedEvent = TypedEvent<
  [string, string] & { name: string; proxy: string }
>;

export type ProxyAdminChangedEvent = TypedEvent<
  [BigNumber, string] & { index: BigNumber; newAdmin: string }
>;

export type ProxyRemovedEvent = TypedEvent<[BigNumber] & { index: BigNumber }>;

export class MultiProxyController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiProxyControllerInterface;

  functions: {
    addProxy(
      name: string,
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeAllAdmins(address)"(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeAllAdmins(uint256,uint256,address)"(
      start: BigNumberish,
      count: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeProxyAdmin(
      index: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getAllImpls(overrides?: CallOverrides): Promise<[string[]]>;

    getAllProxies(overrides?: CallOverrides): Promise<[string[]]>;

    getAllProxiesInfo(overrides?: CallOverrides): Promise<[string[]]>;

    getImpl(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getName(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeProxy(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeProxyTo(
      index: BigNumberish,
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addProxy(
    name: string,
    proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeAllAdmins(address)"(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeAllAdmins(uint256,uint256,address)"(
    start: BigNumberish,
    count: BigNumberish,
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeProxyAdmin(
    index: BigNumberish,
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getAllImpls(overrides?: CallOverrides): Promise<string[]>;

  getAllProxies(overrides?: CallOverrides): Promise<string[]>;

  getAllProxiesInfo(overrides?: CallOverrides): Promise<string[]>;

  getImpl(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getName(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeProxy(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeProxyTo(
    index: BigNumberish,
    newImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addProxy(
      name: string,
      proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeAllAdmins(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeAllAdmins(uint256,uint256,address)"(
      start: BigNumberish,
      count: BigNumberish,
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProxyAdmin(
      index: BigNumberish,
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getAllImpls(overrides?: CallOverrides): Promise<string[]>;

    getAllProxies(overrides?: CallOverrides): Promise<string[]>;

    getAllProxiesInfo(overrides?: CallOverrides): Promise<string[]>;

    getImpl(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getName(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeProxy(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeProxyTo(
      index: BigNumberish,
      newImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProxyAdded(string,address)"(
      name?: null,
      proxy?: null
    ): TypedEventFilter<[string, string], { name: string; proxy: string }>;

    ProxyAdded(
      name?: null,
      proxy?: null
    ): TypedEventFilter<[string, string], { name: string; proxy: string }>;

    "ProxyAdminChanged(uint256,address)"(
      index?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; newAdmin: string }
    >;

    ProxyAdminChanged(
      index?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; newAdmin: string }
    >;

    "ProxyRemoved(uint256)"(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    ProxyRemoved(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;
  };

  estimateGas: {
    addProxy(
      name: string,
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeAllAdmins(address)"(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeAllAdmins(uint256,uint256,address)"(
      start: BigNumberish,
      count: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeProxyAdmin(
      index: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllImpls(overrides?: CallOverrides): Promise<BigNumber>;

    getAllProxies(overrides?: CallOverrides): Promise<BigNumber>;

    getAllProxiesInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getImpl(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getName(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeProxy(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeProxyTo(
      index: BigNumberish,
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProxy(
      name: string,
      proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeAllAdmins(address)"(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeAllAdmins(uint256,uint256,address)"(
      start: BigNumberish,
      count: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeProxyAdmin(
      index: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllImpls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllProxies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllProxiesInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImpl(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeProxy(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeProxyTo(
      index: BigNumberish,
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
