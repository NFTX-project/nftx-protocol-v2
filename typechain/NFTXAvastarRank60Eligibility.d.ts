/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTXAvastarRank60EligibilityInterface extends ethers.utils.Interface {
  functions: {
    "__NFTXEligibility_init()": FunctionFragment;
    "__NFTXEligibility_init_bytes(bytes)": FunctionFragment;
    "afterMintHook(uint256[])": FunctionFragment;
    "afterRedeemHook(uint256[])": FunctionFragment;
    "beforeMintHook(uint256[])": FunctionFragment;
    "beforeRedeemHook(uint256[])": FunctionFragment;
    "checkAllEligible(uint256[])": FunctionFragment;
    "checkAllIneligible(uint256[])": FunctionFragment;
    "checkEligible(uint256[])": FunctionFragment;
    "checkIsEligible(uint256)": FunctionFragment;
    "finalized()": FunctionFragment;
    "name()": FunctionFragment;
    "targetAsset()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXEligibility_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__NFTXEligibility_init_bytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterMintHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRedeemHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeMintHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRedeemHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllEligible",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllIneligible",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkEligible",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsEligible",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__NFTXEligibility_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__NFTXEligibility_init_bytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterMintHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeMintHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllIneligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetAsset",
    data: BytesLike
  ): Result;

  events: {
    "NFTXEligibilityInit()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTXEligibilityInit"): EventFragment;
}

export type NFTXEligibilityInitEvent = TypedEvent<[] & {}>;

export class NFTXAvastarRank60Eligibility extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTXAvastarRank60EligibilityInterface;

  functions: {
    __NFTXEligibility_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __NFTXEligibility_init_bytes(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    finalized(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    targetAsset(overrides?: CallOverrides): Promise<[string]>;
  };

  __NFTXEligibility_init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __NFTXEligibility_init_bytes(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterMintHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterRedeemHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeMintHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeRedeemHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAllEligible(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkAllIneligible(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkEligible(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  checkIsEligible(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  finalized(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  targetAsset(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __NFTXEligibility_init(overrides?: CallOverrides): Promise<void>;

    __NFTXEligibility_init_bytes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finalized(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    targetAsset(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NFTXEligibilityInit()"(): TypedEventFilter<[], {}>;

    NFTXEligibilityInit(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    __NFTXEligibility_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __NFTXEligibility_init_bytes(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalized(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    targetAsset(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXEligibility_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __NFTXEligibility_init_bytes(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
