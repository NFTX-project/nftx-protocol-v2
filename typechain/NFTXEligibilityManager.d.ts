/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTXEligibilityManagerInterface extends ethers.utils.Interface {
  functions: {
    "__NFTXEligibilityManager_init()": FunctionFragment;
    "addModule(address)": FunctionFragment;
    "allModuleNames()": FunctionFragment;
    "allModules()": FunctionFragment;
    "deployEligibility(uint256,bytes)": FunctionFragment;
    "modules(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateModule(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXEligibilityManager_init",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addModule", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allModuleNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployEligibility",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateModule",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "__NFTXEligibilityManager_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allModuleNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateModule",
    data: BytesLike
  ): Result;

  events: {
    "ModuleAdded(address,address,string,bool)": EventFragment;
    "ModuleUpdated(address,string,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ModuleAddedEvent = TypedEvent<
  [string, string, string, boolean] & {
    implementation: string;
    targetAsset: string;
    name: string;
    finalizedOnDeploy: boolean;
  }
>;

export type ModuleUpdatedEvent = TypedEvent<
  [string, string, boolean] & {
    implementation: string;
    name: string;
    finalizedOnDeploy: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class NFTXEligibilityManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTXEligibilityManagerInterface;

  functions: {
    __NFTXEligibilityManager_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addModule(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allModuleNames(overrides?: CallOverrides): Promise<[string[]]>;

    allModules(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string] & {
          implementation: string;
          targetAsset: string;
          name: string;
        })[]
      ]
    >;

    deployEligibility(
      moduleIndex: BigNumberish,
      configData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        implementation: string;
        targetAsset: string;
        name: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateModule(
      moduleIndex: BigNumberish,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __NFTXEligibilityManager_init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addModule(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allModuleNames(overrides?: CallOverrides): Promise<string[]>;

  allModules(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string] & {
      implementation: string;
      targetAsset: string;
      name: string;
    })[]
  >;

  deployEligibility(
    moduleIndex: BigNumberish,
    configData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modules(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      implementation: string;
      targetAsset: string;
      name: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateModule(
    moduleIndex: BigNumberish,
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __NFTXEligibilityManager_init(overrides?: CallOverrides): Promise<void>;

    addModule(implementation: string, overrides?: CallOverrides): Promise<void>;

    allModuleNames(overrides?: CallOverrides): Promise<string[]>;

    allModules(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string] & {
        implementation: string;
        targetAsset: string;
        name: string;
      })[]
    >;

    deployEligibility(
      moduleIndex: BigNumberish,
      configData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    modules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        implementation: string;
        targetAsset: string;
        name: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateModule(
      moduleIndex: BigNumberish,
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ModuleAdded(address,address,string,bool)"(
      implementation?: null,
      targetAsset?: null,
      name?: null,
      finalizedOnDeploy?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      {
        implementation: string;
        targetAsset: string;
        name: string;
        finalizedOnDeploy: boolean;
      }
    >;

    ModuleAdded(
      implementation?: null,
      targetAsset?: null,
      name?: null,
      finalizedOnDeploy?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      {
        implementation: string;
        targetAsset: string;
        name: string;
        finalizedOnDeploy: boolean;
      }
    >;

    "ModuleUpdated(address,string,bool)"(
      implementation?: null,
      name?: null,
      finalizedOnDeploy?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { implementation: string; name: string; finalizedOnDeploy: boolean }
    >;

    ModuleUpdated(
      implementation?: null,
      name?: null,
      finalizedOnDeploy?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { implementation: string; name: string; finalizedOnDeploy: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    __NFTXEligibilityManager_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addModule(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allModuleNames(overrides?: CallOverrides): Promise<BigNumber>;

    allModules(overrides?: CallOverrides): Promise<BigNumber>;

    deployEligibility(
      moduleIndex: BigNumberish,
      configData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateModule(
      moduleIndex: BigNumberish,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXEligibilityManager_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addModule(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allModuleNames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allModules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployEligibility(
      moduleIndex: BigNumberish,
      configData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateModule(
      moduleIndex: BigNumberish,
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
