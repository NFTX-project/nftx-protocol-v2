/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTXLPStaking2Interface extends ethers.utils.Interface {
  functions: {
    "__NFTXLPStaking__init(address)": FunctionFragment;
    "_oldRewardDistributionTokenAddr((address,address))": FunctionFragment;
    "_rewardDistributionTokenAddr((address,address))": FunctionFragment;
    "_unusedRewardDistributionTokenAddr((address,address))": FunctionFragment;
    "addPoolForVault(uint256)": FunctionFragment;
    "balanceOf(uint256,address)": FunctionFragment;
    "claimMultipleRewards(uint256[])": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyExit(address,address)": FunctionFragment;
    "emergencyExitAndClaim(address,address)": FunctionFragment;
    "emergencyMigrate(uint256)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "isGuardian(address)": FunctionFragment;
    "isPaused(uint256)": FunctionFragment;
    "lockedLPBalance(uint256,address)": FunctionFragment;
    "lockedUntil(uint256,address)": FunctionFragment;
    "newRewardDistributionToken(uint256)": FunctionFragment;
    "newTimelockRewardDistTokenImpl()": FunctionFragment;
    "nftxVaultFactory()": FunctionFragment;
    "oldBalanceOf(uint256,address)": FunctionFragment;
    "oldRewardDistributionToken(uint256)": FunctionFragment;
    "onlyOwnerIfPaused(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "receiveRewards(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardDistTokenImpl()": FunctionFragment;
    "rewardDistributionToken(uint256)": FunctionFragment;
    "rewardDistributionTokenAddr(address,address)": FunctionFragment;
    "setIsGuardian(address,bool)": FunctionFragment;
    "setNFTXVaultFactory(address)": FunctionFragment;
    "setStakingTokenProvider(address)": FunctionFragment;
    "stakingTokenProvider()": FunctionFragment;
    "sum(uint256,uint256)": FunctionFragment;
    "timelockDepositFor(uint256,address,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
    "unusedBalanceOf(uint256,address)": FunctionFragment;
    "unusedRewardDistributionToken(uint256)": FunctionFragment;
    "updatePoolForVault(uint256)": FunctionFragment;
    "updatePoolForVaults(uint256[])": FunctionFragment;
    "vaultStakingInfo(uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXLPStaking__init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_oldRewardDistributionTokenAddr",
    values: [{ stakingToken: string; rewardToken: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardDistributionTokenAddr",
    values: [{ stakingToken: string; rewardToken: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "_unusedRewardDistributionTokenAddr",
    values: [{ stakingToken: string; rewardToken: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolForVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExitAndClaim",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMigrate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "isGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPaused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLPBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedUntil",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newRewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newTimelockRewardDistTokenImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftxVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldBalanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "oldRewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerIfPaused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "receiveRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistTokenImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributionTokenAddr",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsGuardian",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTXVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingTokenProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockDepositFor",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unusedBalanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unusedRewardDistributionToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolForVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolForVaults",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultStakingInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__NFTXLPStaking__init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_oldRewardDistributionTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardDistributionTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_unusedRewardDistributionTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolForVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExitAndClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMigrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedLPBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newRewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newTimelockRewardDistTokenImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftxVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldRewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerIfPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistTokenImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributionTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTXVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingTokenProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockDepositFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unusedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unusedRewardDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolForVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolForVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FeesReceived(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(uint256,address)": EventFragment;
    "PoolUpdated(uint256,address)": EventFragment;
    "SetIsGuardian(address,bool)": EventFragment;
    "SetPaused(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIsGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPaused"): EventFragment;
}

export type FeesReceivedEvent = TypedEvent<
  [BigNumber, BigNumber] & { vaultId: BigNumber; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PoolCreatedEvent = TypedEvent<
  [BigNumber, string] & { vaultId: BigNumber; pool: string }
>;

export type PoolUpdatedEvent = TypedEvent<
  [BigNumber, string] & { vaultId: BigNumber; pool: string }
>;

export type SetIsGuardianEvent = TypedEvent<
  [string, boolean] & { addr: string; isGuardian: boolean }
>;

export type SetPausedEvent = TypedEvent<
  [BigNumber, boolean] & { lockId: BigNumber; paused: boolean }
>;

export class NFTXLPStaking2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTXLPStaking2Interface;

  functions: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _oldRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _rewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _unusedRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<[string]>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimMultipleRewards(
      vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyExit(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyExitAndClaim(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyMigrate(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isGuardian(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    lockedLPBalance(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedUntil(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newTimelockRewardDistTokenImpl(
      overrides?: CallOverrides
    ): Promise<[string]>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    oldBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDistTokenImpl(overrides?: CallOverrides): Promise<[string]>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingTokenProvider(overrides?: CallOverrides): Promise<[string]>;

    sum(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unusedBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolForVaults(
      vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultStakingInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { stakingToken: string; rewardToken: string }
    >;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __NFTXLPStaking__init(
    _stakingTokenProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _oldRewardDistributionTokenAddr(
    pool: { stakingToken: string; rewardToken: string },
    overrides?: CallOverrides
  ): Promise<string>;

  _rewardDistributionTokenAddr(
    pool: { stakingToken: string; rewardToken: string },
    overrides?: CallOverrides
  ): Promise<string>;

  _unusedRewardDistributionTokenAddr(
    pool: { stakingToken: string; rewardToken: string },
    overrides?: CallOverrides
  ): Promise<string>;

  addPoolForVault(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    vaultId: BigNumberish,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimMultipleRewards(
    vaultIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyExit(
    _stakingToken: string,
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyExitAndClaim(
    _stakingToken: string,
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyMigrate(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isGuardian(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  lockedLPBalance(
    vaultId: BigNumberish,
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedUntil(
    vaultId: BigNumberish,
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newRewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  newTimelockRewardDistTokenImpl(overrides?: CallOverrides): Promise<string>;

  nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

  oldBalanceOf(
    vaultId: BigNumberish,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oldRewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  onlyOwnerIfPaused(
    lockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receiveRewards(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDistTokenImpl(overrides?: CallOverrides): Promise<string>;

  rewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardDistributionTokenAddr(
    stakedToken: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setIsGuardian(
    addr: string,
    _isGuardian: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTXVaultFactory(
    newFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingTokenProvider(
    newProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingTokenProvider(overrides?: CallOverrides): Promise<string>;

  sum(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timelockDepositFor(
    vaultId: BigNumberish,
    account: string,
    amount: BigNumberish,
    timelockLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unusedBalanceOf(
    vaultId: BigNumberish,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unusedRewardDistributionToken(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updatePoolForVault(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolForVaults(
    vaultIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultStakingInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { stakingToken: string; rewardToken: string }>;

  withdraw(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _oldRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<string>;

    _rewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<string>;

    _unusedRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<string>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMultipleRewards(
      vaultIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyExit(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyExitAndClaim(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyMigrate(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    isGuardian(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    lockedLPBalance(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedUntil(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    newTimelockRewardDistTokenImpl(overrides?: CallOverrides): Promise<string>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

    oldBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardDistTokenImpl(overrides?: CallOverrides): Promise<string>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingTokenProvider(overrides?: CallOverrides): Promise<string>;

    sum(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unusedBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolForVaults(
      vaultIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vaultStakingInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { stakingToken: string; rewardToken: string }
    >;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeesReceived(uint256,uint256)"(
      vaultId?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultId: BigNumber; amount: BigNumber }
    >;

    FeesReceived(
      vaultId?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultId: BigNumber; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PoolCreated(uint256,address)"(
      vaultId?: null,
      pool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { vaultId: BigNumber; pool: string }
    >;

    PoolCreated(
      vaultId?: null,
      pool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { vaultId: BigNumber; pool: string }
    >;

    "PoolUpdated(uint256,address)"(
      vaultId?: null,
      pool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { vaultId: BigNumber; pool: string }
    >;

    PoolUpdated(
      vaultId?: null,
      pool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { vaultId: BigNumber; pool: string }
    >;

    "SetIsGuardian(address,bool)"(
      addr?: null,
      isGuardian?: null
    ): TypedEventFilter<
      [string, boolean],
      { addr: string; isGuardian: boolean }
    >;

    SetIsGuardian(
      addr?: null,
      isGuardian?: null
    ): TypedEventFilter<
      [string, boolean],
      { addr: string; isGuardian: boolean }
    >;

    "SetPaused(uint256,bool)"(
      lockId?: null,
      paused?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { lockId: BigNumber; paused: boolean }
    >;

    SetPaused(
      lockId?: null,
      paused?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { lockId: BigNumber; paused: boolean }
    >;
  };

  estimateGas: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _oldRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _rewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _unusedRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMultipleRewards(
      vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyExit(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyExitAndClaim(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyMigrate(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isGuardian(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lockedLPBalance(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedUntil(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newTimelockRewardDistTokenImpl(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    oldBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDistTokenImpl(overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingTokenProvider(overrides?: CallOverrides): Promise<BigNumber>;

    sum(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unusedBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolForVaults(
      vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultStakingInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXLPStaking__init(
      _stakingTokenProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _oldRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _rewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _unusedRewardDistributionTokenAddr(
      pool: { stakingToken: string; rewardToken: string },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimMultipleRewards(
      vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyExit(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyExitAndClaim(
      _stakingToken: string,
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyMigrate(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isGuardian(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaused(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedLPBalance(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedUntil(
      vaultId: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newTimelockRewardDistTokenImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oldRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receiveRewards(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDistTokenImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributionTokenAddr(
      stakedToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTXVaultFactory(
      newFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingTokenProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingTokenProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sum(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockDepositFor(
      vaultId: BigNumberish,
      account: string,
      amount: BigNumberish,
      timelockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unusedBalanceOf(
      vaultId: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unusedRewardDistributionToken(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePoolForVault(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolForVaults(
      vaultIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultStakingInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
