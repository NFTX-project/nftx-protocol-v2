/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTXMarketplaceZapInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "buyAndRedeem(uint256,uint256,uint256[],address[],address)": FunctionFragment;
    "buyAndRedeemWETH(uint256,uint256,uint256[],uint256,address[],address)": FunctionFragment;
    "buyAndSwap1155(uint256,uint256[],uint256[],uint256[],address[],address)": FunctionFragment;
    "buyAndSwap1155WETH(uint256,uint256[],uint256[],uint256[],uint256,address[],address)": FunctionFragment;
    "buyAndSwap721(uint256,uint256[],uint256[],address[],address)": FunctionFragment;
    "buyAndSwap721WETH(uint256,uint256[],uint256[],uint256,address[],address)": FunctionFragment;
    "lpStaking()": FunctionFragment;
    "mintAndSell1155(uint256,uint256[],uint256[],uint256,address[],address)": FunctionFragment;
    "mintAndSell1155WETH(uint256,uint256[],uint256[],uint256,address[],address)": FunctionFragment;
    "mintAndSell721(uint256,uint256[],uint256,address[],address)": FunctionFragment;
    "mintAndSell721WETH(uint256,uint256[],uint256,address[],address)": FunctionFragment;
    "nftxFactory()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "sushiRouter()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyAndRedeem",
    values: [BigNumberish, BigNumberish, BigNumberish[], string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndRedeemWETH",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndSwap1155",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndSwap1155WETH",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndSwap721",
    values: [BigNumberish, BigNumberish[], BigNumberish[], string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndSwap721WETH",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      string[],
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "lpStaking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintAndSell1155",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndSell1155WETH",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndSell721",
    values: [BigNumberish, BigNumberish[], BigNumberish, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndSell721WETH",
    values: [BigNumberish, BigNumberish[], BigNumberish, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftxFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rescue", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sushiRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndRedeemWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndSwap1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndSwap1155WETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndSwap721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndSwap721WETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAndSell1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndSell1155WETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndSell721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndSell721WETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftxFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Buy(uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Sell(uint256,uint256,address)": EventFragment;
    "Swap(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type BuyEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    count: BigNumber;
    ethSpent: BigNumber;
    to: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SellEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    count: BigNumber;
    ethReceived: BigNumber;
    to: string;
  }
>;

export type SwapEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    count: BigNumber;
    ethSpent: BigNumber;
    to: string;
  }
>;

export class NFTXMarketplaceZap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTXMarketplaceZapInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    buyAndRedeem(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndRedeemWETH(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndSwap1155(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndSwap1155WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndSwap721(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndSwap721WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lpStaking(overrides?: CallOverrides): Promise<[string]>;

    mintAndSell1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndSell1155WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndSell721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minEthOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndSell721WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftxFactory(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescue(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sushiRouter(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  buyAndRedeem(
    vaultId: BigNumberish,
    amount: BigNumberish,
    specificIds: BigNumberish[],
    path: string[],
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndRedeemWETH(
    vaultId: BigNumberish,
    amount: BigNumberish,
    specificIds: BigNumberish[],
    maxWethIn: BigNumberish,
    path: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndSwap1155(
    vaultId: BigNumberish,
    idsIn: BigNumberish[],
    amounts: BigNumberish[],
    specificIds: BigNumberish[],
    path: string[],
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndSwap1155WETH(
    vaultId: BigNumberish,
    idsIn: BigNumberish[],
    amounts: BigNumberish[],
    specificIds: BigNumberish[],
    maxWethIn: BigNumberish,
    path: string[],
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndSwap721(
    vaultId: BigNumberish,
    idsIn: BigNumberish[],
    specificIds: BigNumberish[],
    path: string[],
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndSwap721WETH(
    vaultId: BigNumberish,
    idsIn: BigNumberish[],
    specificIds: BigNumberish[],
    maxWethIn: BigNumberish,
    path: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lpStaking(overrides?: CallOverrides): Promise<string>;

  mintAndSell1155(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    minWethOut: BigNumberish,
    path: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndSell1155WETH(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    minWethOut: BigNumberish,
    path: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndSell721(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    minEthOut: BigNumberish,
    path: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndSell721WETH(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    minWethOut: BigNumberish,
    path: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftxFactory(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescue(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sushiRouter(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    buyAndRedeem(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAndRedeemWETH(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAndSwap1155(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAndSwap1155WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAndSwap721(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAndSwap721WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lpStaking(overrides?: CallOverrides): Promise<string>;

    mintAndSell1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndSell1155WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndSell721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minEthOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndSell721WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nftxFactory(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescue(token: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sushiRouter(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Buy(uint256,uint256,address)"(
      count?: null,
      ethSpent?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { count: BigNumber; ethSpent: BigNumber; to: string }
    >;

    Buy(
      count?: null,
      ethSpent?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { count: BigNumber; ethSpent: BigNumber; to: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Sell(uint256,uint256,address)"(
      count?: null,
      ethReceived?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { count: BigNumber; ethReceived: BigNumber; to: string }
    >;

    Sell(
      count?: null,
      ethReceived?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { count: BigNumber; ethReceived: BigNumber; to: string }
    >;

    "Swap(uint256,uint256,address)"(
      count?: null,
      ethSpent?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { count: BigNumber; ethSpent: BigNumber; to: string }
    >;

    Swap(
      count?: null,
      ethSpent?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { count: BigNumber; ethSpent: BigNumber; to: string }
    >;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    buyAndRedeem(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndRedeemWETH(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndSwap1155(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndSwap1155WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndSwap721(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndSwap721WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lpStaking(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndSell1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndSell1155WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndSell721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minEthOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndSell721WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftxFactory(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescue(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sushiRouter(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyAndRedeem(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndRedeemWETH(
      vaultId: BigNumberish,
      amount: BigNumberish,
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndSwap1155(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndSwap1155WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      amounts: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndSwap721(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      path: string[],
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndSwap721WETH(
      vaultId: BigNumberish,
      idsIn: BigNumberish[],
      specificIds: BigNumberish[],
      maxWethIn: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAndSell1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndSell1155WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndSell721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minEthOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndSell721WETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethOut: BigNumberish,
      path: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftxFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescue(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sushiRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
