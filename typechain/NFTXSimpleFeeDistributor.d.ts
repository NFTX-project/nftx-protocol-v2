/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTXSimpleFeeDistributorInterface extends ethers.utils.Interface {
  functions: {
    "__SimpleFeeDistributor__init__(address,address)": FunctionFragment;
    "addReceiver(uint256,address,bool)": FunctionFragment;
    "allocTotal()": FunctionFragment;
    "changeReceiverAddress(uint256,address,bool)": FunctionFragment;
    "changeReceiverAlloc(uint256,uint256)": FunctionFragment;
    "distribute(uint256)": FunctionFragment;
    "distributionPaused()": FunctionFragment;
    "feeReceivers(uint256)": FunctionFragment;
    "initializeVaultReceivers(uint256)": FunctionFragment;
    "inventoryStaking()": FunctionFragment;
    "isGuardian(address)": FunctionFragment;
    "isPaused(uint256)": FunctionFragment;
    "lpStaking()": FunctionFragment;
    "nftxVaultFactory()": FunctionFragment;
    "onlyOwnerIfPaused(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "pauseFeeDistribution(bool)": FunctionFragment;
    "removeReceiver(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueTokens(address)": FunctionFragment;
    "setInventoryStakingAddress(address)": FunctionFragment;
    "setIsGuardian(address,bool)": FunctionFragment;
    "setLPStakingAddress(address)": FunctionFragment;
    "setNFTXVaultFactory(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__SimpleFeeDistributor__init__",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReceiver",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allocTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeReceiverAddress",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReceiverAlloc",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeVaultReceivers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inventoryStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPaused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lpStaking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftxVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerIfPaused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "pauseFeeDistribution",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReceiver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInventoryStakingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsGuardian",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPStakingAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTXVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__SimpleFeeDistributor__init__",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocTotal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeReceiverAlloc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeVaultReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inventoryStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftxVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerIfPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInventoryStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTXVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AddFeeReceiver(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PauseDistribution(bool)": EventFragment;
    "RemoveFeeReceiver(address)": EventFragment;
    "SetIsGuardian(address,bool)": EventFragment;
    "SetPaused(uint256,bool)": EventFragment;
    "UpdateFeeReceiverAddress(address,address)": EventFragment;
    "UpdateFeeReceiverAlloc(address,uint256)": EventFragment;
    "UpdateInventoryStakingAddress(address)": EventFragment;
    "UpdateLPStakingAddress(address)": EventFragment;
    "UpdateNFTXVaultFactory(address)": EventFragment;
    "UpdateTreasuryAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddFeeReceiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseDistribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFeeReceiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIsGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeReceiverAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeReceiverAlloc"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateInventoryStakingAddress"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLPStakingAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateNFTXVaultFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTreasuryAddress"): EventFragment;
}

export type AddFeeReceiverEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; allocPoint: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PauseDistributionEvent = TypedEvent<
  [boolean] & { paused: boolean }
>;

export type RemoveFeeReceiverEvent = TypedEvent<
  [string] & { receiver: string }
>;

export type SetIsGuardianEvent = TypedEvent<
  [string, boolean] & { addr: string; isGuardian: boolean }
>;

export type SetPausedEvent = TypedEvent<
  [BigNumber, boolean] & { lockId: BigNumber; paused: boolean }
>;

export type UpdateFeeReceiverAddressEvent = TypedEvent<
  [string, string] & { oldReceiver: string; newReceiver: string }
>;

export type UpdateFeeReceiverAllocEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; allocPoint: BigNumber }
>;

export type UpdateInventoryStakingAddressEvent = TypedEvent<
  [string] & { newInventoryStaking: string }
>;

export type UpdateLPStakingAddressEvent = TypedEvent<
  [string] & { newLPStaking: string }
>;

export type UpdateNFTXVaultFactoryEvent = TypedEvent<
  [string] & { factory: string }
>;

export type UpdateTreasuryAddressEvent = TypedEvent<
  [string] & { newTreasury: string }
>;

export class NFTXSimpleFeeDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTXSimpleFeeDistributorInterface;

  functions: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeReceiverAddress(
      _receiverIdx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeReceiverAlloc(
      _receiverIdx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distribute(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributionPaused(overrides?: CallOverrides): Promise<[boolean]>;

    feeReceivers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        allocPoint: BigNumber;
        receiver: string;
        isContract: boolean;
      }
    >;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inventoryStaking(overrides?: CallOverrides): Promise<[string]>;

    isGuardian(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    lpStaking(overrides?: CallOverrides): Promise<[string]>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseFeeDistribution(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTokens(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __SimpleFeeDistributor__init__(
    _lpStaking: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReceiver(
    _allocPoint: BigNumberish,
    _receiver: string,
    _isContract: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocTotal(overrides?: CallOverrides): Promise<BigNumber>;

  changeReceiverAddress(
    _receiverIdx: BigNumberish,
    _address: string,
    _isContract: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeReceiverAlloc(
    _receiverIdx: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distribute(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributionPaused(overrides?: CallOverrides): Promise<boolean>;

  feeReceivers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean] & {
      allocPoint: BigNumber;
      receiver: string;
      isContract: boolean;
    }
  >;

  initializeVaultReceivers(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inventoryStaking(overrides?: CallOverrides): Promise<string>;

  isGuardian(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  lpStaking(overrides?: CallOverrides): Promise<string>;

  nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

  onlyOwnerIfPaused(
    lockId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseFeeDistribution(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeReceiver(
    _receiverIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTokens(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInventoryStakingAddress(
    _inventoryStaking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsGuardian(
    addr: string,
    _isGuardian: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLPStakingAddress(
    _lpStaking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTXVaultFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allocTotal(overrides?: CallOverrides): Promise<BigNumber>;

    changeReceiverAddress(
      _receiverIdx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeReceiverAlloc(
      _receiverIdx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distribute(vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    distributionPaused(overrides?: CallOverrides): Promise<boolean>;

    feeReceivers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        allocPoint: BigNumber;
        receiver: string;
        isContract: boolean;
      }
    >;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    inventoryStaking(overrides?: CallOverrides): Promise<string>;

    isGuardian(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    lpStaking(overrides?: CallOverrides): Promise<string>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<string>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    pauseFeeDistribution(
      _pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueTokens(_address: string, overrides?: CallOverrides): Promise<void>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddFeeReceiver(address,uint256)"(
      receiver?: null,
      allocPoint?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; allocPoint: BigNumber }
    >;

    AddFeeReceiver(
      receiver?: null,
      allocPoint?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; allocPoint: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PauseDistribution(bool)"(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    PauseDistribution(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    "RemoveFeeReceiver(address)"(
      receiver?: null
    ): TypedEventFilter<[string], { receiver: string }>;

    RemoveFeeReceiver(
      receiver?: null
    ): TypedEventFilter<[string], { receiver: string }>;

    "SetIsGuardian(address,bool)"(
      addr?: null,
      isGuardian?: null
    ): TypedEventFilter<
      [string, boolean],
      { addr: string; isGuardian: boolean }
    >;

    SetIsGuardian(
      addr?: null,
      isGuardian?: null
    ): TypedEventFilter<
      [string, boolean],
      { addr: string; isGuardian: boolean }
    >;

    "SetPaused(uint256,bool)"(
      lockId?: null,
      paused?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { lockId: BigNumber; paused: boolean }
    >;

    SetPaused(
      lockId?: null,
      paused?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { lockId: BigNumber; paused: boolean }
    >;

    "UpdateFeeReceiverAddress(address,address)"(
      oldReceiver?: null,
      newReceiver?: null
    ): TypedEventFilter<
      [string, string],
      { oldReceiver: string; newReceiver: string }
    >;

    UpdateFeeReceiverAddress(
      oldReceiver?: null,
      newReceiver?: null
    ): TypedEventFilter<
      [string, string],
      { oldReceiver: string; newReceiver: string }
    >;

    "UpdateFeeReceiverAlloc(address,uint256)"(
      receiver?: null,
      allocPoint?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; allocPoint: BigNumber }
    >;

    UpdateFeeReceiverAlloc(
      receiver?: null,
      allocPoint?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; allocPoint: BigNumber }
    >;

    "UpdateInventoryStakingAddress(address)"(
      newInventoryStaking?: null
    ): TypedEventFilter<[string], { newInventoryStaking: string }>;

    UpdateInventoryStakingAddress(
      newInventoryStaking?: null
    ): TypedEventFilter<[string], { newInventoryStaking: string }>;

    "UpdateLPStakingAddress(address)"(
      newLPStaking?: null
    ): TypedEventFilter<[string], { newLPStaking: string }>;

    UpdateLPStakingAddress(
      newLPStaking?: null
    ): TypedEventFilter<[string], { newLPStaking: string }>;

    "UpdateNFTXVaultFactory(address)"(
      factory?: null
    ): TypedEventFilter<[string], { factory: string }>;

    UpdateNFTXVaultFactory(
      factory?: null
    ): TypedEventFilter<[string], { factory: string }>;

    "UpdateTreasuryAddress(address)"(
      newTreasury?: null
    ): TypedEventFilter<[string], { newTreasury: string }>;

    UpdateTreasuryAddress(
      newTreasury?: null
    ): TypedEventFilter<[string], { newTreasury: string }>;
  };

  estimateGas: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocTotal(overrides?: CallOverrides): Promise<BigNumber>;

    changeReceiverAddress(
      _receiverIdx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeReceiverAlloc(
      _receiverIdx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distribute(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributionPaused(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceivers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inventoryStaking(overrides?: CallOverrides): Promise<BigNumber>;

    isGuardian(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lpStaking(overrides?: CallOverrides): Promise<BigNumber>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseFeeDistribution(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTokens(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __SimpleFeeDistributor__init__(
      _lpStaking: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReceiver(
      _allocPoint: BigNumberish,
      _receiver: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeReceiverAddress(
      _receiverIdx: BigNumberish,
      _address: string,
      _isContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeReceiverAlloc(
      _receiverIdx: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distribute(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributionPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeReceivers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeVaultReceivers(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inventoryStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGuardian(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaused(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftxVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerIfPaused(
      lockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseFeeDistribution(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeReceiver(
      _receiverIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTokens(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInventoryStakingAddress(
      _inventoryStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsGuardian(
      addr: string,
      _isGuardian: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLPStakingAddress(
      _lpStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTXVaultFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
