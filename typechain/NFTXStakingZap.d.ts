/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTXStakingZapInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addLiquidity1155(uint256,uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "addLiquidity1155ETH(uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "addLiquidity1155ETHTo(uint256,uint256[],uint256[],uint256,address)": FunctionFragment;
    "addLiquidity1155To(uint256,uint256[],uint256[],uint256,uint256,address)": FunctionFragment;
    "addLiquidity721(uint256,uint256[],uint256,uint256)": FunctionFragment;
    "addLiquidity721ETH(uint256,uint256[],uint256)": FunctionFragment;
    "addLiquidity721ETHTo(uint256,uint256[],uint256,address)": FunctionFragment;
    "addLiquidity721To(uint256,uint256[],uint256,uint256,address)": FunctionFragment;
    "assignStakingContracts()": FunctionFragment;
    "inventoryLockTime()": FunctionFragment;
    "inventoryStaking()": FunctionFragment;
    "lpLockTime()": FunctionFragment;
    "lpStaking()": FunctionFragment;
    "nftxFactory()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "provideInventory1155(uint256,uint256[],uint256[])": FunctionFragment;
    "provideInventory721(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue(address)": FunctionFragment;
    "setInventoryLockTime(uint256)": FunctionFragment;
    "setLPLockTime(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "sushiRouter()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity1155",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity1155ETH",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity1155ETHTo",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity1155To",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity721",
    values: [BigNumberish, BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity721ETH",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity721ETHTo",
    values: [BigNumberish, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity721To",
    values: [BigNumberish, BigNumberish[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assignStakingContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inventoryLockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inventoryStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpLockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpStaking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftxFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideInventory1155",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "provideInventory721",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rescue", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInventoryLockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPLockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sushiRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity1155ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity1155ETHTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity1155To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity721ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity721ETHTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity721To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignStakingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inventoryLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inventoryStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpLockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftxFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideInventory1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideInventory721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInventoryLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "UserStaked(uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserStaked"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UserStakedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    vaultId: BigNumber;
    count: BigNumber;
    lpBalance: BigNumber;
    timelockUntil: BigNumber;
    sender: string;
  }
>;

export class NFTXStakingZap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTXStakingZapInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity1155ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity1155ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity1155To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity721ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity721ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity721To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assignStakingContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inventoryLockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    inventoryStaking(overrides?: CallOverrides): Promise<[string]>;

    lpLockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpStaking(overrides?: CallOverrides): Promise<[string]>;

    nftxFactory(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    provideInventory1155(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    provideInventory721(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescue(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInventoryLockTime(
      newInventoryLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLPLockTime(
      newLPLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sushiRouter(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  addLiquidity1155(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    minWethIn: BigNumberish,
    wethIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity1155ETH(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    minEthIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity1155ETHTo(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    minEthIn: BigNumberish,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity1155To(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    minWethIn: BigNumberish,
    wethIn: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity721(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    minWethIn: BigNumberish,
    wethIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity721ETH(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    minWethIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity721ETHTo(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    minWethIn: BigNumberish,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity721To(
    vaultId: BigNumberish,
    ids: BigNumberish[],
    minWethIn: BigNumberish,
    wethIn: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assignStakingContracts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inventoryLockTime(overrides?: CallOverrides): Promise<BigNumber>;

  inventoryStaking(overrides?: CallOverrides): Promise<string>;

  lpLockTime(overrides?: CallOverrides): Promise<BigNumber>;

  lpStaking(overrides?: CallOverrides): Promise<string>;

  nftxFactory(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  provideInventory1155(
    vaultId: BigNumberish,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  provideInventory721(
    vaultId: BigNumberish,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescue(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInventoryLockTime(
    newInventoryLockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLPLockTime(
    newLPLockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sushiRouter(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    addLiquidity1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity1155ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity1155ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity1155To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity721ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity721ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity721To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignStakingContracts(overrides?: CallOverrides): Promise<void>;

    inventoryLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    inventoryStaking(overrides?: CallOverrides): Promise<string>;

    lpLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    lpStaking(overrides?: CallOverrides): Promise<string>;

    nftxFactory(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    provideInventory1155(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    provideInventory721(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescue(token: string, overrides?: CallOverrides): Promise<void>;

    setInventoryLockTime(
      newInventoryLockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPLockTime(
      newLPLockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sushiRouter(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UserStaked(uint256,uint256,uint256,uint256,address)"(
      vaultId?: null,
      count?: null,
      lpBalance?: null,
      timelockUntil?: null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        vaultId: BigNumber;
        count: BigNumber;
        lpBalance: BigNumber;
        timelockUntil: BigNumber;
        sender: string;
      }
    >;

    UserStaked(
      vaultId?: null,
      count?: null,
      lpBalance?: null,
      timelockUntil?: null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        vaultId: BigNumber;
        count: BigNumber;
        lpBalance: BigNumber;
        timelockUntil: BigNumber;
        sender: string;
      }
    >;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity1155ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity1155ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity1155To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity721ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity721ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity721To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assignStakingContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inventoryLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    inventoryStaking(overrides?: CallOverrides): Promise<BigNumber>;

    lpLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    lpStaking(overrides?: CallOverrides): Promise<BigNumber>;

    nftxFactory(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    provideInventory1155(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    provideInventory721(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescue(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInventoryLockTime(
      newInventoryLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLPLockTime(
      newLPLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sushiRouter(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity1155(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity1155ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity1155ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minEthIn: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity1155To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity721(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity721ETH(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity721ETHTo(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity721To(
      vaultId: BigNumberish,
      ids: BigNumberish[],
      minWethIn: BigNumberish,
      wethIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assignStakingContracts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inventoryLockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inventoryStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpLockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftxFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideInventory1155(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    provideInventory721(
      vaultId: BigNumberish,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescue(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInventoryLockTime(
      newInventoryLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLPLockTime(
      newLPLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sushiRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
