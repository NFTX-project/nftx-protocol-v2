/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTXUniqueEligibilityInterface extends ethers.utils.Interface {
  functions: {
    "__NFTXEligibility_init(address,address,bool,bool,uint256[])": FunctionFragment;
    "__NFTXEligibility_init_bytes(bytes)": FunctionFragment;
    "afterMintHook(uint256[])": FunctionFragment;
    "afterRedeemHook(uint256[])": FunctionFragment;
    "beforeMintHook(uint256[])": FunctionFragment;
    "beforeRedeemHook(uint256[])": FunctionFragment;
    "checkAllEligible(uint256[])": FunctionFragment;
    "checkAllIneligible(uint256[])": FunctionFragment;
    "checkEligible(uint256[])": FunctionFragment;
    "checkIsEligible(uint256)": FunctionFragment;
    "finalized()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isUniqueEligible(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "negateEligOnRedeem()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEligibilityPreferences(bool)": FunctionFragment;
    "setUniqueEligibilities(uint256[],bool)": FunctionFragment;
    "targetAsset()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__NFTXEligibility_init",
    values: [string, string, boolean, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "__NFTXEligibility_init_bytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterMintHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRedeemHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeMintHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRedeemHook",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllEligible",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllIneligible",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkEligible",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsEligible",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUniqueEligible",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "negateEligOnRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibilityPreferences",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniqueEligibilities",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "targetAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "__NFTXEligibility_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__NFTXEligibility_init_bytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterMintHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeMintHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRedeemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllIneligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUniqueEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "negateEligOnRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibilityPreferences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniqueEligibilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NFTXEligibilityInit(address,address,bool,bool,uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UniqueEligibilitiesSet(uint256[],bool)": EventFragment;
    "negateEligilityOnRedeemSet(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTXEligibilityInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniqueEligibilitiesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "negateEligilityOnRedeemSet"): EventFragment;
}

export type NFTXEligibilityInitEvent = TypedEvent<
  [string, string, boolean, boolean, BigNumber[]] & {
    owner: string;
    vault: string;
    negateElig: boolean;
    finalize: boolean;
    tokenIds: BigNumber[];
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UniqueEligibilitiesSetEvent = TypedEvent<
  [BigNumber[], boolean] & { tokenIds: BigNumber[]; isEligible: boolean }
>;

export type negateEligilityOnRedeemSetEvent = TypedEvent<
  [boolean] & { negateElig: boolean }
>;

export class NFTXUniqueEligibility extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTXUniqueEligibilityInterface;

  functions: {
    __NFTXEligibility_init(
      _owner: string,
      _vault: string,
      negateElig: boolean,
      finalize: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __NFTXEligibility_init_bytes(
      _configData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    finalized(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isUniqueEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    negateEligOnRedeem(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEligibilityPreferences(
      _negateEligOnRedeem: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUniqueEligibilities(
      tokenIds: BigNumberish[],
      _isEligible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetAsset(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __NFTXEligibility_init(
    _owner: string,
    _vault: string,
    negateElig: boolean,
    finalize: boolean,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __NFTXEligibility_init_bytes(
    _configData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterMintHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterRedeemHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeMintHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeRedeemHook(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAllEligible(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkAllIneligible(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkEligible(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  checkIsEligible(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  finalized(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isUniqueEligible(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  negateEligOnRedeem(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEligibilityPreferences(
    _negateEligOnRedeem: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUniqueEligibilities(
    tokenIds: BigNumberish[],
    _isEligible: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetAsset(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __NFTXEligibility_init(
      _owner: string,
      _vault: string,
      negateElig: boolean,
      finalize: boolean,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    __NFTXEligibility_init_bytes(
      _configData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finalized(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isUniqueEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    negateEligOnRedeem(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEligibilityPreferences(
      _negateEligOnRedeem: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniqueEligibilities(
      tokenIds: BigNumberish[],
      _isEligible: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    targetAsset(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NFTXEligibilityInit(address,address,bool,bool,uint256[])"(
      owner?: null,
      vault?: null,
      negateElig?: null,
      finalize?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, boolean, boolean, BigNumber[]],
      {
        owner: string;
        vault: string;
        negateElig: boolean;
        finalize: boolean;
        tokenIds: BigNumber[];
      }
    >;

    NFTXEligibilityInit(
      owner?: null,
      vault?: null,
      negateElig?: null,
      finalize?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, boolean, boolean, BigNumber[]],
      {
        owner: string;
        vault: string;
        negateElig: boolean;
        finalize: boolean;
        tokenIds: BigNumber[];
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UniqueEligibilitiesSet(uint256[],bool)"(
      tokenIds?: null,
      isEligible?: null
    ): TypedEventFilter<
      [BigNumber[], boolean],
      { tokenIds: BigNumber[]; isEligible: boolean }
    >;

    UniqueEligibilitiesSet(
      tokenIds?: null,
      isEligible?: null
    ): TypedEventFilter<
      [BigNumber[], boolean],
      { tokenIds: BigNumber[]; isEligible: boolean }
    >;

    "negateEligilityOnRedeemSet(bool)"(
      negateElig?: null
    ): TypedEventFilter<[boolean], { negateElig: boolean }>;

    negateEligilityOnRedeemSet(
      negateElig?: null
    ): TypedEventFilter<[boolean], { negateElig: boolean }>;
  };

  estimateGas: {
    __NFTXEligibility_init(
      _owner: string,
      _vault: string,
      negateElig: boolean,
      finalize: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __NFTXEligibility_init_bytes(
      _configData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalized(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isUniqueEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    negateEligOnRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEligibilityPreferences(
      _negateEligOnRedeem: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUniqueEligibilities(
      tokenIds: BigNumberish[],
      _isEligible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetAsset(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __NFTXEligibility_init(
      _owner: string,
      _vault: string,
      negateElig: boolean,
      finalize: boolean,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __NFTXEligibility_init_bytes(
      _configData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeMintHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeRedeemHook(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAllEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAllIneligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkEligible(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIsEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUniqueEligible(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    negateEligOnRedeem(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEligibilityPreferences(
      _negateEligOnRedeem: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUniqueEligibilities(
      tokenIds: BigNumberish[],
      _isEligible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
