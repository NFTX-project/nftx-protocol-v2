/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingTokenProviderInterface extends ethers.utils.Interface {
  functions: {
    "__StakingTokenProvider_init(address,address,string)": FunctionFragment;
    "defaultPairedToken()": FunctionFragment;
    "defaultPrefix()": FunctionFragment;
    "nameForStakingToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairForVaultToken(address,address)": FunctionFragment;
    "pairedPrefix(address)": FunctionFragment;
    "pairedToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultPairedToken(address,string)": FunctionFragment;
    "setPairedTokenForVaultToken(address,address,string)": FunctionFragment;
    "stakingTokenForVaultToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniLikeExchange()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__StakingTokenProvider_init",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPairedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPrefix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nameForStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairForVaultToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pairedPrefix",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pairedToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultPairedToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairedTokenForVaultToken",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenForVaultToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniLikeExchange",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__StakingTokenProvider_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPairedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameForStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairForVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairedPrefix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultPairedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairedTokenForVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenForVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniLikeExchange",
    data: BytesLike
  ): Result;

  events: {
    "NewDefaultPaired(address,address)": EventFragment;
    "NewPairedTokenForVault(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDefaultPaired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPairedTokenForVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type NewDefaultPairedEvent = TypedEvent<
  [string, string] & { oldPaired: string; newPaired: string }
>;

export type NewPairedTokenForVaultEvent = TypedEvent<
  [string, string, string] & {
    vaultToken: string;
    oldPairedtoken: string;
    newPairedToken: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class StakingTokenProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingTokenProviderInterface;

  functions: {
    __StakingTokenProvider_init(
      _uniLikeExchange: string,
      _defaultPairedtoken: string,
      _defaultPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultPairedToken(overrides?: CallOverrides): Promise<[string]>;

    defaultPrefix(overrides?: CallOverrides): Promise<[string]>;

    nameForStakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairForVaultToken(
      _vaultToken: string,
      _pairedToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pairedPrefix(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    pairedToken(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultPairedToken(
      _newDefaultPaired: string,
      _newDefaultPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPairedTokenForVaultToken(
      _vaultToken: string,
      _newPairedToken: string,
      _newPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingTokenForVaultToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniLikeExchange(overrides?: CallOverrides): Promise<[string]>;
  };

  __StakingTokenProvider_init(
    _uniLikeExchange: string,
    _defaultPairedtoken: string,
    _defaultPrefix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultPairedToken(overrides?: CallOverrides): Promise<string>;

  defaultPrefix(overrides?: CallOverrides): Promise<string>;

  nameForStakingToken(
    _vaultToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairForVaultToken(
    _vaultToken: string,
    _pairedToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  pairedPrefix(arg0: string, overrides?: CallOverrides): Promise<string>;

  pairedToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultPairedToken(
    _newDefaultPaired: string,
    _newDefaultPrefix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPairedTokenForVaultToken(
    _vaultToken: string,
    _newPairedToken: string,
    _newPrefix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingTokenForVaultToken(
    _vaultToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniLikeExchange(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __StakingTokenProvider_init(
      _uniLikeExchange: string,
      _defaultPairedtoken: string,
      _defaultPrefix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultPairedToken(overrides?: CallOverrides): Promise<string>;

    defaultPrefix(overrides?: CallOverrides): Promise<string>;

    nameForStakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairForVaultToken(
      _vaultToken: string,
      _pairedToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pairedPrefix(arg0: string, overrides?: CallOverrides): Promise<string>;

    pairedToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDefaultPairedToken(
      _newDefaultPaired: string,
      _newDefaultPrefix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairedTokenForVaultToken(
      _vaultToken: string,
      _newPairedToken: string,
      _newPrefix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingTokenForVaultToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniLikeExchange(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewDefaultPaired(address,address)"(
      oldPaired?: null,
      newPaired?: null
    ): TypedEventFilter<
      [string, string],
      { oldPaired: string; newPaired: string }
    >;

    NewDefaultPaired(
      oldPaired?: null,
      newPaired?: null
    ): TypedEventFilter<
      [string, string],
      { oldPaired: string; newPaired: string }
    >;

    "NewPairedTokenForVault(address,address,address)"(
      vaultToken?: null,
      oldPairedtoken?: null,
      newPairedToken?: null
    ): TypedEventFilter<
      [string, string, string],
      { vaultToken: string; oldPairedtoken: string; newPairedToken: string }
    >;

    NewPairedTokenForVault(
      vaultToken?: null,
      oldPairedtoken?: null,
      newPairedToken?: null
    ): TypedEventFilter<
      [string, string, string],
      { vaultToken: string; oldPairedtoken: string; newPairedToken: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    __StakingTokenProvider_init(
      _uniLikeExchange: string,
      _defaultPairedtoken: string,
      _defaultPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultPairedToken(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPrefix(overrides?: CallOverrides): Promise<BigNumber>;

    nameForStakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairForVaultToken(
      _vaultToken: string,
      _pairedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairedPrefix(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairedToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultPairedToken(
      _newDefaultPaired: string,
      _newDefaultPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPairedTokenForVaultToken(
      _vaultToken: string,
      _newPairedToken: string,
      _newPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingTokenForVaultToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniLikeExchange(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __StakingTokenProvider_init(
      _uniLikeExchange: string,
      _defaultPairedtoken: string,
      _defaultPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultPairedToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultPrefix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameForStakingToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairForVaultToken(
      _vaultToken: string,
      _pairedToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairedPrefix(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairedToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultPairedToken(
      _newDefaultPaired: string,
      _newDefaultPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPairedTokenForVaultToken(
      _vaultToken: string,
      _newPairedToken: string,
      _newPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingTokenForVaultToken(
      _vaultToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniLikeExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
