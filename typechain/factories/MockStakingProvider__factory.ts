/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockStakingProvider,
  MockStakingProviderInterface,
} from "../MockStakingProvider";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vaultToken",
        type: "address",
      },
    ],
    name: "nameForStakingToken",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_changed",
        type: "bool",
      },
    ],
    name: "setChanged",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vaultToken",
        type: "address",
      },
    ],
    name: "stakingTokenForVaultToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b610256565b600054610100900460ff1680610037575060005460ff16155b61008d5760405162461bcd60e51b815260206004820152602e602482015260008051602061089283398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156100af576000805461ffff19166101011790555b6100b76100d4565b6100bf610173565b80156100d1576000805461ff00191690555b50565b600054610100900460ff16806100ed575060005460ff16155b61013e5760405162461bcd60e51b815260206004820152602e602482015260008051602061089283398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610084565b600054610100900460ff161580156100bf576000805461ffff191661010117905580156100d1576000805461ff001916905550565b600054610100900460ff168061018c575060005460ff16155b6101dd5760405162461bcd60e51b815260206004820152602e602482015260008051602061089283398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610084565b600054610100900460ff161580156101ff576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156100d1576000805461ff001916905550565b61062d806102656000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806396c596711161005057806396c59671146100c2578063c9c53aa4146100e2578063f2fde38b146100f557600080fd5b8063715018a61461007757806387c13f4d146100815780638da5cb5b146100b1575b600080fd5b61007f610108565b005b61009461008f366004610429565b6101be565b6040516001600160a01b0390911681526020015b60405180910390f35b6033546001600160a01b0316610094565b6100d56100d0366004610429565b6101da565b6040516100a89190610565565b61007f6100f0366004610457565b61027d565b61007f610103366004610429565b6102ea565b6033546001600160a01b031633146101675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36033805473ffffffffffffffffffffffffffffffffffffffff19169055565b60655460009060ff166101d157816101d4565b60015b92915050565b60606000826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561021757600080fd5b505afa15801561022b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102539190810190610477565b9050806040516020016102669190610520565b604051602081830303815290604052915050919050565b6033546001600160a01b031633146102d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015e565b6065805460ff1916911515919091179055565b6033546001600160a01b031633146103445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161015e565b6001600160a01b0381166103c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161015e565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006020828403121561043a578081fd5b81356001600160a01b0381168114610450578182fd5b9392505050565b600060208284031215610468578081fd5b81358015158114610450578182fd5b600060208284031215610488578081fd5b815167ffffffffffffffff8082111561049f578283fd5b818401915084601f8301126104b2578283fd5b8151818111156104c4576104c46105c8565b604051601f8201601f19908116603f011681019083821181831017156104ec576104ec6105c8565b81604052828152876020848701011115610504578586fd5b610515836020830160208801610598565b979650505050505050565b7f6261736564000000000000000000000000000000000000000000000000000000815260008251610558816005850160208701610598565b9190910160050192915050565b6020815260008251806020840152610584816040850160208701610598565b601f01601f19169190910160400192915050565b60005b838110156105b357818101518382015260200161059b565b838111156105c2576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220d7f76ede60875d6c4295bd0eaf47de24485e414aa551401b6f23911a32ebc37364736f6c63430008040033496e697469616c697a61626c653a20636f6e747261637420697320616c726561";

export class MockStakingProvider__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockStakingProvider> {
    return super.deploy(overrides || {}) as Promise<MockStakingProvider>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockStakingProvider {
    return super.attach(address) as MockStakingProvider;
  }
  connect(signer: Signer): MockStakingProvider__factory {
    return super.connect(signer) as MockStakingProvider__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStakingProviderInterface {
    return new utils.Interface(_abi) as MockStakingProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStakingProvider {
    return new Contract(address, _abi, signerOrProvider) as MockStakingProvider;
  }
}
