/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Avastar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Avastar__factory>;
    getContractFactory(
      name: "NFTXAvastarRank60Eligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXAvastarRank60Eligibility__factory>;
    getContractFactory(
      name: "NFTXDeferEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXDeferEligibility__factory>;
    getContractFactory(
      name: "NFTXDenyEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXDenyEligibility__factory>;
    getContractFactory(
      name: "NFTXEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXEligibility__factory>;
    getContractFactory(
      name: "KittyCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KittyCore__factory>;
    getContractFactory(
      name: "NFTXGen0KittyEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXGen0KittyEligibility__factory>;
    getContractFactory(
      name: "KittyCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KittyCore__factory>;
    getContractFactory(
      name: "NFTXGen0FastKittyEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXGen0FastKittyEligibility__factory>;
    getContractFactory(
      name: "NFTXListEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXListEligibility__factory>;
    getContractFactory(
      name: "NFTXMintRequestEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXMintRequestEligibility__factory>;
    getContractFactory(
      name: "NFTXOpenseaEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXOpenseaEligibility__factory>;
    getContractFactory(
      name: "NFTXRangeEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXRangeEligibility__factory>;
    getContractFactory(
      name: "NFTXRangeExtendedEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXRangeExtendedEligibility__factory>;
    getContractFactory(
      name: "IPolymorph",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPolymorph__factory>;
    getContractFactory(
      name: "NFTXUglyEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXUglyEligibility__factory>;
    getContractFactory(
      name: "NFTXUniqueEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXUniqueEligibility__factory>;
    getContractFactory(
      name: "UniqueEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniqueEligibility__factory>;
    getContractFactory(
      name: "INonfungiblePositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonfungiblePositionManager__factory>;
    getContractFactory(
      name: "UniswapV3SparkleEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3SparkleEligibility__factory>;
    getContractFactory(
      name: "IAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrowerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable__factory>;
    getContractFactory(
      name: "IERC3156FlashLenderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable__factory>;
    getContractFactory(
      name: "INFTXEligibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXEligibility__factory>;
    getContractFactory(
      name: "INFTXEligibilityManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXEligibilityManager__factory>;
    getContractFactory(
      name: "INFTXFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXFeeDistributor__factory>;
    getContractFactory(
      name: "INFTXInventoryStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXInventoryStaking__factory>;
    getContractFactory(
      name: "INFTXLPStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXLPStaking__factory>;
    getContractFactory(
      name: "INFTXSimpleFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXSimpleFeeDistributor__factory>;
    getContractFactory(
      name: "INFTXVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXVault__factory>;
    getContractFactory(
      name: "INFTXVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTXVaultFactory__factory>;
    getContractFactory(
      name: "IPrevNftxContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrevNftxContract__factory>;
    getContractFactory(
      name: "IRewardDistributionToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardDistributionToken__factory>;
    getContractFactory(
      name: "ITimelockRewardDistributionToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelockRewardDistributionToken__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IVaultTokenUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultTokenUpgradeable__factory>;
    getContractFactory(
      name: "NFTXEligibilityManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXEligibilityManager__factory>;
    getContractFactory(
      name: "NFTXInventoryStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXInventoryStaking__factory>;
    getContractFactory(
      name: "NFTXLPStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXLPStaking__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "NFTXMarketplaceZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXMarketplaceZap__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "NFTXSimpleFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXSimpleFeeDistributor__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "NFTXStakingZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXStakingZap__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IV1Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IV1Token__factory>;
    getContractFactory(
      name: "NFTXV1Buyout",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXV1Buyout__factory>;
    getContractFactory(
      name: "NFTXVaultFactoryUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXVaultFactoryUpgradeable__factory>;
    getContractFactory(
      name: "NFTXVaultUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXVaultUpgradeable__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "PalmNFTXStakingZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PalmNFTXStakingZap__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "Create2BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "MultiProxyController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiProxyController__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyController__factory>;
    getContractFactory(
      name: "ProxyControllerSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyControllerSimple__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "StakingTokenProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingTokenProvider__factory>;
    getContractFactory(
      name: "CryptoPunksMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CryptoPunksMarket__factory>;
    getContractFactory(
      name: "DummyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyToken__factory>;
    getContractFactory(
      name: "DummyXToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyXToken__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashBorrower__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "MockDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockDistributor__factory>;
    getContractFactory(
      name: "MockStakingProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStakingProvider__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;
    getContractFactory(
      name: "NFTXEligibilityManager2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXEligibilityManager2__factory>;
    getContractFactory(
      name: "NFTXLPStaking2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXLPStaking2__factory>;
    getContractFactory(
      name: "NFTXVaultFactoryUpgradeable2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXVaultFactoryUpgradeable2__factory>;
    getContractFactory(
      name: "TestFactoryUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestFactoryUpgrade__factory>;
    getContractFactory(
      name: "TestVaultUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestVaultUpgrade__factory>;
    getContractFactory(
      name: "ERC1155HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155HolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155SafeHolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155SafeHolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC20FlashMintUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FlashMintUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721HolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC721SafeHolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721SafeHolderUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Upgradeable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "RewardDistributionTokenUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardDistributionTokenUpgradeable__factory>;
    getContractFactory(
      name: "TimelockRewardDistributionTokenImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockRewardDistributionTokenImpl__factory>;
    getContractFactory(
      name: "XTokenUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XTokenUpgradeable__factory>;
    getContractFactory(
      name: "ClaimToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimToken__factory>;
    getContractFactory(
      name: "NFTXFlashSwipe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTXFlashSwipe__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;

    getContractAt(
      name: "Avastar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Avastar>;
    getContractAt(
      name: "NFTXAvastarRank60Eligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXAvastarRank60Eligibility>;
    getContractAt(
      name: "NFTXDeferEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXDeferEligibility>;
    getContractAt(
      name: "NFTXDenyEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXDenyEligibility>;
    getContractAt(
      name: "NFTXEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXEligibility>;
    getContractAt(
      name: "KittyCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KittyCore>;
    getContractAt(
      name: "NFTXGen0KittyEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXGen0KittyEligibility>;
    getContractAt(
      name: "KittyCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KittyCore>;
    getContractAt(
      name: "NFTXGen0FastKittyEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXGen0FastKittyEligibility>;
    getContractAt(
      name: "NFTXListEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXListEligibility>;
    getContractAt(
      name: "NFTXMintRequestEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXMintRequestEligibility>;
    getContractAt(
      name: "NFTXOpenseaEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXOpenseaEligibility>;
    getContractAt(
      name: "NFTXRangeEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXRangeEligibility>;
    getContractAt(
      name: "NFTXRangeExtendedEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXRangeExtendedEligibility>;
    getContractAt(
      name: "IPolymorph",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPolymorph>;
    getContractAt(
      name: "NFTXUglyEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXUglyEligibility>;
    getContractAt(
      name: "NFTXUniqueEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXUniqueEligibility>;
    getContractAt(
      name: "UniqueEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniqueEligibility>;
    getContractAt(
      name: "INonfungiblePositionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonfungiblePositionManager>;
    getContractAt(
      name: "UniswapV3SparkleEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3SparkleEligibility>;
    getContractAt(
      name: "IAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdminUpgradeabilityProxy>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "IERC3156FlashBorrowerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable>;
    getContractAt(
      name: "IERC3156FlashLenderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable>;
    getContractAt(
      name: "INFTXEligibility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXEligibility>;
    getContractAt(
      name: "INFTXEligibilityManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXEligibilityManager>;
    getContractAt(
      name: "INFTXFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXFeeDistributor>;
    getContractAt(
      name: "INFTXInventoryStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXInventoryStaking>;
    getContractAt(
      name: "INFTXLPStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXLPStaking>;
    getContractAt(
      name: "INFTXSimpleFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXSimpleFeeDistributor>;
    getContractAt(
      name: "INFTXVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXVault>;
    getContractAt(
      name: "INFTXVaultFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTXVaultFactory>;
    getContractAt(
      name: "IPrevNftxContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrevNftxContract>;
    getContractAt(
      name: "IRewardDistributionToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardDistributionToken>;
    getContractAt(
      name: "ITimelockRewardDistributionToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimelockRewardDistributionToken>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IVaultTokenUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultTokenUpgradeable>;
    getContractAt(
      name: "NFTXEligibilityManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXEligibilityManager>;
    getContractAt(
      name: "NFTXInventoryStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXInventoryStaking>;
    getContractAt(
      name: "NFTXLPStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXLPStaking>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "NFTXMarketplaceZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXMarketplaceZap>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "NFTXSimpleFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXSimpleFeeDistributor>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "NFTXStakingZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXStakingZap>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IV1Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IV1Token>;
    getContractAt(
      name: "NFTXV1Buyout",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXV1Buyout>;
    getContractAt(
      name: "NFTXVaultFactoryUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXVaultFactoryUpgradeable>;
    getContractAt(
      name: "NFTXVaultUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXVaultUpgradeable>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "PalmNFTXStakingZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PalmNFTXStakingZap>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "Create2BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "MultiProxyController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiProxyController>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyController>;
    getContractAt(
      name: "ProxyControllerSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyControllerSimple>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "StakingTokenProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingTokenProvider>;
    getContractAt(
      name: "CryptoPunksMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CryptoPunksMarket>;
    getContractAt(
      name: "DummyToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyToken>;
    getContractAt(
      name: "DummyXToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyXToken>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashBorrower>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "MockDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockDistributor>;
    getContractAt(
      name: "MockStakingProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStakingProvider>;
    getContractAt(
      name: "MockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVault>;
    getContractAt(
      name: "NFTXEligibilityManager2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXEligibilityManager2>;
    getContractAt(
      name: "NFTXLPStaking2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXLPStaking2>;
    getContractAt(
      name: "NFTXVaultFactoryUpgradeable2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXVaultFactoryUpgradeable2>;
    getContractAt(
      name: "TestFactoryUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestFactoryUpgrade>;
    getContractAt(
      name: "TestVaultUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestVaultUpgrade>;
    getContractAt(
      name: "ERC1155HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155HolderUpgradeable>;
    getContractAt(
      name: "ERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "ERC1155SafeHolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155SafeHolderUpgradeable>;
    getContractAt(
      name: "ERC20FlashMintUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FlashMintUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC721HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721HolderUpgradeable>;
    getContractAt(
      name: "ERC721SafeHolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721SafeHolderUpgradeable>;
    getContractAt(
      name: "IERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "IERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Upgradeable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "RewardDistributionTokenUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardDistributionTokenUpgradeable>;
    getContractAt(
      name: "TimelockRewardDistributionTokenImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockRewardDistributionTokenImpl>;
    getContractAt(
      name: "XTokenUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XTokenUpgradeable>;
    getContractAt(
      name: "ClaimToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimToken>;
    getContractAt(
      name: "NFTXFlashSwipe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTXFlashSwipe>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
